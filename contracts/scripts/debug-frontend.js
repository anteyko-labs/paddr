const { ethers } = require("hardhat");

async function main() {
  console.log("=== üîç –û–¢–õ–ê–î–ö–ê –§–†–û–ù–¢–ï–ù–î–ê –ò –ü–†–û–í–ï–†–ö–ê –î–ê–ù–ù–´–• ===\n");

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
  const accounts = await ethers.getSigners();
  const deployer = accounts[0];
  
  console.log("üë§ Deployer:", deployer.address);
  console.log("");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const CONTRACT_ADDRESSES = {
    PADToken: "0x6D84688A4734F091cD42F6D998d3F3cB4A990849",
    MultiStakeManager: "0x8D5b8A4841Ed2Dac943DD01B9E51eCC21E17FaAb",
    VoucherManager: "0xFe267475409db3703597C230C67Fa7dD36C78A4d",
    PADNFTFactory: "0x7d19632e1b76C0667Db471f61a38E60C7B088579",
  };

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
  const PADToken = await ethers.getContractAt("PADToken", CONTRACT_ADDRESSES.PADToken);
  const MultiStakeManager = await ethers.getContractAt("MultiStakeManager", CONTRACT_ADDRESSES.MultiStakeManager);
  const VoucherManager = await ethers.getContractAt("VoucherManager", CONTRACT_ADDRESSES.VoucherManager);

  console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–õ–ê–ù–° –ò ALLOWANCE ===
  console.log("=== üí∞ –ë–ê–õ–ê–ù–° –ò ALLOWANCE ===");
  const balance = await PADToken.balanceOf(deployer.address);
  const allowance = await PADToken.allowance(deployer.address, CONTRACT_ADDRESSES.MultiStakeManager);
  
  console.log(`–ë–∞–ª–∞–Ω—Å PAD: ${ethers.formatEther(balance)} PAD`);
  console.log(`Allowance: ${ethers.formatEther(allowance)} PAD`);
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–ó–ò–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
  console.log("=== üìä –ü–û–ó–ò–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===");
  try {
    const userPositions = await MultiStakeManager.getUserPositions(deployer.address);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: ${userPositions.length}`);
    
    if (userPositions.length > 0) {
      console.log("ID –ø–æ–∑–∏—Ü–∏–π:", userPositions.map(id => id.toString()));
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
      for (let i = 0; i < Math.min(userPositions.length, 3); i++) {
        const positionId = userPositions[i];
        console.log(`\n--- –ü–æ–∑–∏—Ü–∏—è ${positionId.toString()} ---`);
        
        try {
          const position = await MultiStakeManager.getPosition(positionId);
          console.log("ID:", position.id.toString());
          console.log("Owner:", position.owner);
          console.log("Amount:", ethers.formatEther(position.amount), "PAD");
          console.log("Tier:", position.tier.toString());
          console.log("Start Time:", new Date(Number(position.startTime) * 1000).toLocaleString());
          console.log("End Time:", new Date(Number(position.endTime) * 1000).toLocaleString());
          console.log("Is Active:", position.isActive);
          console.log("Next Mint On:", new Date(Number(position.nextMintOn) * 1000).toLocaleString());
          console.log("Month Index:", position.monthIndex.toString());
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–∏ ${positionId}:`, error.message);
        }
      }
    } else {
      console.log("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π");
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π:", error.message);
  }
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –í–ê–£–ß–ï–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
  console.log("=== üé´ –í–ê–£–ß–ï–†–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===");
  try {
    const userVoucherIds = await VoucherManager.getUserVoucherIds(deployer.address);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—É—á–µ—Ä–æ–≤: ${userVoucherIds.length}`);
    
    if (userVoucherIds.length > 0) {
      console.log("ID –≤–∞—É—á–µ—Ä–æ–≤:", userVoucherIds.map(id => id.toString()));
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –≤–∞—É—á–µ—Ä–∞
      const firstVoucherId = userVoucherIds[0];
      console.log(`\n--- –í–∞—É—á–µ—Ä ${firstVoucherId.toString()} ---`);
      
      try {
        const voucher = await VoucherManager.getUserVoucher(firstVoucherId);
        console.log("Voucher Type ID:", voucher.voucherTypeId.toString());
        console.log("Position ID:", voucher.positionId.toString());
        console.log("Tier:", voucher.tier.toString());
        console.log("Issued At:", new Date(Number(voucher.issuedAt) * 1000).toLocaleString());
        console.log("Used At:", voucher.usedAt.toString() === "0" ? "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω" : new Date(Number(voucher.usedAt) * 1000).toLocaleString());
        console.log("Usage Count:", voucher.usageCount.toString());
        console.log("Max Uses:", voucher.maxUses.toString());
        console.log("Is Active:", voucher.isActive);
        console.log("Voucher Code:", voucher.voucherCode);
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—É—á–µ—Ä–∞ ${firstVoucherId}:`, error.message);
      }
    } else {
      console.log("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤–∞—É—á–µ—Ä–æ–≤");
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—É—á–µ—Ä–æ–≤:", error.message);
  }
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú TIER LEVELS ===
  console.log("=== üèÜ TIER LEVELS ===");
  try {
    const tierCount = await MultiStakeManager.getTierCount();
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏—Ä–æ–≤: ${tierCount}`);
    
    for (let i = 0; i < Number(tierCount); i++) {
      try {
        const tierInfo = await MultiStakeManager.getTierInfo(i);
        console.log(`\n--- Tier ${i} ---`);
        console.log("Name:", tierInfo.name);
        console.log("Min Amount:", ethers.formatEther(tierInfo.minAmount), "PAD");
        console.log("Max Amount:", ethers.formatEther(tierInfo.maxAmount), "PAD");
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏—Ä–∞ ${i}:`, error.message);
      }
    }
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∏—Ä–æ–≤:", error.message);
  }
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –û–ë–©–£–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–£ ===
  console.log("=== üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===");
  try {
    const totalStaked = await MultiStakeManager.getTotalStaked(deployer.address);
    console.log(`–û–±—â–∞—è —Å—É–º–º–∞ –≤ —Å—Ç–µ–π–∫–∏–Ω–≥–µ: ${ethers.formatEther(totalStaked)} PAD`);
  } catch (error) {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:", error.message);
  }
  console.log("");

  console.log("=== ‚úÖ –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
