const { ethers } = require("hardhat");

async function main() {
  console.log("üîç Testing QR Code functionality...\n");

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
  const [owner, user1, admin] = await ethers.getSigners();
  
  console.log("üë§ Owner:", owner.address);
  console.log("üë§ User1:", user1.address);
  console.log("üë§ Admin:", admin.address);

  // –î–µ–ø–ª–æ–∏–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  console.log("\nüì¶ Deploying contracts...");
  
  const PADToken = await ethers.getContractFactory("PADToken");
  const padToken = await PADToken.deploy();
  await padToken.waitForDeployment();
  console.log("‚úÖ PADToken deployed to:", await padToken.getAddress());

  const VoucherManager = await ethers.getContractFactory("VoucherManager");
  const voucherManager = await VoucherManager.deploy();
  await voucherManager.waitForDeployment();
  console.log("‚úÖ VoucherManager deployed to:", await voucherManager.getAddress());

  const MultiStakeManager = await ethers.getContractFactory("MultiStakeManager");
  const multiStakeManager = await MultiStakeManager.deploy(await padToken.getAddress());
  await multiStakeManager.waitForDeployment();
  console.log("‚úÖ MultiStakeManager deployed to:", await multiStakeManager.getAddress());

  const TierCalculator = await ethers.getContractFactory("TierCalculator");
  const tierCalculator = await TierCalculator.deploy();
  await tierCalculator.waitForDeployment();
  console.log("‚úÖ TierCalculator deployed to:", await tierCalculator.getAddress());

  const PADNFTFactory = await ethers.getContractFactory("PADNFTFactory");
  const nftFactory = await PADNFTFactory.deploy(await multiStakeManager.getAddress(), await tierCalculator.getAddress());
  await nftFactory.waitForDeployment();
  console.log("‚úÖ PADNFTFactory deployed to:", await nftFactory.getAddress());

  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ–ª–∏ –∏ —Å–≤—è–∑–∏
  console.log("\nüîó Setting up roles and connections...");
  
  await multiStakeManager.setVoucherManager(await voucherManager.getAddress());
  console.log("‚úÖ VoucherManager set in MultiStakeManager");
  
  await multiStakeManager.setNFTFactory(await nftFactory.getAddress());
  console.log("‚úÖ NFTFactory set in MultiStakeManager");
  
  await voucherManager.grantRole(await voucherManager.ADMIN_ROLE(), await multiStakeManager.getAddress());
  console.log("‚úÖ ADMIN_ROLE granted to MultiStakeManager in VoucherManager");
  
  await nftFactory.grantRole(await nftFactory.MINTER_ROLE(), await multiStakeManager.getAddress());
  console.log("‚úÖ MINTER_ROLE granted to MultiStakeManager in NFTFactory");

  // –î–∞–µ–º –∞–¥–º–∏–Ω—É —Ä–æ–ª—å REDEEMER_ROLE
  await voucherManager.grantRole(await voucherManager.REDEEMER_ROLE(), admin.address);
  console.log("‚úÖ REDEEMER_ROLE granted to admin");

  // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–∫–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const transferAmount = ethers.parseEther("10000");
  await padToken.transfer(user1.address, transferAmount);
  console.log(`üí∞ Transferred ${ethers.formatEther(transferAmount)} tokens to user1`);

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç–µ–π–∫–∞–µ—Ç
  console.log("\nü•â Testing Bronze tier staking...");
  
  const stakeAmount = ethers.parseEther("500");
  const duration = 3600; // 1 —á–∞—Å
  
  await padToken.connect(user1).approve(await multiStakeManager.getAddress(), stakeAmount);
  console.log("‚úÖ Approval successful");
  
  const stakeTx = await multiStakeManager.connect(user1).createPosition(stakeAmount, duration);
  const stakeReceipt = await stakeTx.wait();
  console.log("‚úÖ Bronze tier staking successful");
  console.log("üìù Transaction hash:", stakeTx.hash);
  
  // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ —Å–æ–±—ã—Ç–∏—è
  const positionCreatedEvent = stakeReceipt.logs.find(log => {
    try {
      const parsed = multiStakeManager.interface.parseLog(log);
      return parsed.name === "PositionCreated";
    } catch {
      return false;
    }
  });
  
  const positionId = positionCreatedEvent ? positionCreatedEvent.args.positionId : 1;
  console.log("üìç Position ID:", positionId);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—É—á–µ—Ä—ã
  console.log("\nüé´ Checking vouchers...");
  const userVouchers = await voucherManager.getUserVouchers(user1.address);
  console.log("üìã Total vouchers created:", userVouchers.length);

  // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –≤–∞—É—á–µ—Ä–∞
  const firstVoucherId = userVouchers[0];
  const voucher = await voucherManager.getVoucher(firstVoucherId);
  console.log("\nüìù First voucher details:");
  console.log("   ID:", voucher.id.toString());
  console.log("   Name:", voucher.name);
  console.log("   Description:", voucher.description);
  console.log("   Value:", voucher.value);
  console.log("   Type:", voucher.voucherType.toString());
  console.log("   Is Active:", voucher.isActive);
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ –≤—Ä—É—á–Ω—É—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const qrCode = `voucher_${firstVoucherId}_${user1.address}_${positionId}`;
  console.log("   QR Code (generated):", qrCode);

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤–∞—É—á–µ—Ä–∞ –ø–æ QR –∫–æ–¥—É
  console.log("\nüîç Testing QR code lookup...");
  try {
    const foundVoucher = await voucherManager.findVoucherByQRCode(qrCode);
    console.log("‚úÖ Voucher found by QR code:");
    console.log("   ID:", foundVoucher.id.toString());
    console.log("   Name:", foundVoucher.name);
  } catch (error) {
    console.log("‚ùå Error finding voucher by QR code:", error.message);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≥–∞—à–µ–Ω–∏–µ –≤–∞—É—á–µ—Ä–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∞
  console.log("\nüé´ Testing voucher redemption...");
  try {
    const redeemTx = await voucherManager.connect(admin).redeemVoucher(qrCode, admin.address);
    await redeemTx.wait();
    console.log("‚úÖ Voucher redeemed successfully");
    console.log("üìù Redemption transaction hash:", redeemTx.hash);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞—É—á–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–≥–∞—à–µ–Ω–∏—è
    const redeemedVoucher = await voucherManager.getVoucher(firstVoucherId);
    console.log("üìä Voucher status after redemption:");
    console.log("   Is Active:", redeemedVoucher.isActive);
    console.log("   Current Uses:", redeemedVoucher.currentUses.toString());
    
  } catch (error) {
    console.log("‚ùå Error redeeming voucher:", error.message);
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ QR –∫–æ–¥–∞
  console.log("\nüîÑ Testing QR code reuse prevention...");
  try {
    const secondRedeemTx = await voucherManager.connect(admin).redeemVoucher(qrCode, admin.address);
    await secondRedeemTx.wait();
    console.log("‚ùå QR code should not be reusable");
  } catch (error) {
    console.log("‚úÖ QR code reuse prevented:", error.message);
  }

  console.log("\nüéâ QR Code testing completed!");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå Error:", error);
    process.exit(1);
  });
