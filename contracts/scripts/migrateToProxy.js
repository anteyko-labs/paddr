const { ethers } = require("hardhat");

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –Ω–∞ –Ω–æ–≤—É—é –ø—Ä–æ–∫—Å–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–ª–∞–≤–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥
 */

async function main() {
    console.log("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –ø—Ä–æ–∫—Å–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É...");

    const [deployer] = await ethers.getSigners();
    console.log("Deployer:", deployer.address);

    // 1. –î–µ–ø–ª–æ–π TierWeightManager
    console.log("\nüì¶ –î–µ–ø–ª–æ–∏–º TierWeightManager...");
    const TierWeightManager = await ethers.getContractFactory("TierWeightManager");
    const tierWeightManager = await TierWeightManager.deploy();
    await tierWeightManager.waitForDeployment();
    console.log("TierWeightManager deployed to:", await tierWeightManager.getAddress());

    // 2. –î–µ–ø–ª–æ–π ProxyFactory
    console.log("\nüè≠ –î–µ–ø–ª–æ–∏–º ProxyFactory...");
    const ProxyFactory = await ethers.getContractFactory("ProxyFactory");
    const proxyFactory = await ProxyFactory.deploy();
    await proxyFactory.waitForDeployment();
    console.log("ProxyFactory deployed to:", await proxyFactory.getAddress());

    // 3. –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ —Å—Ç–µ–π–∫–∏–Ω–≥–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω —É–∂–µ –¥–µ–ø–ª–æ–µ–Ω)
    const STAKING_TOKEN_ADDRESS = "0x..."; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å

    // 4. –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–∏—Ä–æ–≤
    const initialTierWeights = [
        {
            minAmount: ethers.parseEther("500"),
            maxAmount: ethers.parseEther("500"),
            duration: 3600, // 1 —á–∞—Å
            rewardRate: 100, // 1%
            nftMultiplier: 1,
            isActive: true
        },
        {
            minAmount: ethers.parseEther("1000"),
            maxAmount: ethers.parseEther("1000"),
            duration: 7200, // 2 —á–∞—Å–∞
            rewardRate: 200, // 2%
            nftMultiplier: 1,
            isActive: true
        },
        {
            minAmount: ethers.parseEther("3000"),
            maxAmount: ethers.parseEther("3000"),
            duration: 10800, // 3 —á–∞—Å–∞
            rewardRate: 300, // 3%
            nftMultiplier: 1,
            isActive: true
        },
        {
            minAmount: ethers.parseEther("4000"),
            maxAmount: ethers.parseEther("4000"),
            duration: 14400, // 4 —á–∞—Å–∞
            rewardRate: 400, // 4%
            nftMultiplier: 1,
            isActive: true
        }
    ];

    // 5. –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ ProxyFactory
    console.log("\nüîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ ProxyFactory...");
    const tx = await proxyFactory.createDeployment(STAKING_TOKEN_ADDRESS, initialTierWeights);
    const receipt = await tx.wait();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑ —Ä–µ—Ü–µ–ø—Ç–∞
    const deploymentEvent = receipt.logs.find(log => {
        try {
            const parsed = proxyFactory.interface.parseLog(log);
            return parsed.name === "DeploymentCreated";
        } catch (e) {
            return false;
        }
    });

    if (deploymentEvent) {
        const parsed = proxyFactory.interface.parseLog(deploymentEvent);
        const deploymentId = parsed.args.deploymentId;
        const proxyAddress = parsed.args.proxy;
        const proxyAdminAddress = parsed.args.proxyAdmin;

        console.log("‚úÖ –î–µ–ø–ª–æ–π —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
        console.log("Deployment ID:", deploymentId.toString());
        console.log("Proxy Address:", proxyAddress);
        console.log("ProxyAdmin Address:", proxyAdminAddress);

        // 6. –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ–∫—Å–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const UpgradeableMultiStakeManager = await ethers.getContractFactory("UpgradeableMultiStakeManager");
        const proxyContract = UpgradeableMultiStakeManager.attach(proxyAddress);

        // 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
        console.log("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–æ–∫—Å–∏...");
        const configVersion = await proxyContract.getConfigVersion();
        console.log("Config Version:", configVersion.toString());

        const activeTiers = await proxyContract.getActiveTiers();
        console.log("Active Tiers:", activeTiers);

        // 8. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        const deploymentInfo = {
            deploymentId: deploymentId.toString(),
            proxyAddress: proxyAddress,
            proxyAdminAddress: proxyAdminAddress,
            tierWeightManagerAddress: await tierWeightManager.getAddress(),
            proxyFactoryAddress: await proxyFactory.getAddress(),
            stakingTokenAddress: STAKING_TOKEN_ADDRESS,
            deploymentTime: new Date().toISOString()
        };

        console.log("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–ª–æ–µ:");
        console.log(JSON.stringify(deploymentInfo, null, 2));

        // 9. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        const fs = require('fs');
        fs.writeFileSync(
            './deployment-info.json',
            JSON.stringify(deploymentInfo, null, 2)
        );

        console.log("\n‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!");
        console.log("üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ–ø–ª–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ deployment-info.json");

    } else {
        console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ DeploymentCreated");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Å–æ–≤ —Ç–∏—Ä–æ–≤
async function updateTierWeights(proxyFactoryAddress, deploymentId, newWeights) {
    console.log("\nüîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ —Ç–∏—Ä–æ–≤...");
    
    const ProxyFactory = await ethers.getContractFactory("ProxyFactory");
    const proxyFactory = ProxyFactory.attach(proxyFactoryAddress);

    // –î–µ–ø–ª–æ–∏–º –Ω–æ–≤—ã–π TierWeightManager —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –≤–µ—Å–∞–º–∏
    const TierWeightManager = await ethers.getContractFactory("TierWeightManager");
    const newTierWeightManager = await TierWeightManager.deploy();
    await newTierWeightManager.waitForDeployment();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –≤–µ—Å–∞
    for (let i = 0; i < newWeights.length; i++) {
        await newTierWeightManager.updateTierConfig(i, newWeights[i]);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º TierWeightManager –≤ –ø—Ä–æ–∫—Å–∏
    const tx = await proxyFactory.updateTierWeightManager(
        deploymentId,
        await newTierWeightManager.getAddress()
    );
    await tx.wait();

    console.log("‚úÖ –í–µ—Å–∞ —Ç–∏—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
    console.log("–ù–æ–≤—ã–π TierWeightManager:", await newTierWeightManager.getAddress());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
async function upgradeImplementation(proxyFactoryAddress, deploymentId, newImplementationAddress) {
    console.log("\n‚¨ÜÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é...");
    
    const ProxyFactory = await ethers.getContractFactory("ProxyFactory");
    const proxyFactory = ProxyFactory.attach(proxyFactoryAddress);

    const tx = await proxyFactory.upgradeImplementation(deploymentId, newImplementationAddress);
    await tx.wait();

    console.log("‚úÖ –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
}

if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error(error);
            process.exit(1);
        });
}

module.exports = {
    main,
    updateTierWeights,
    upgradeImplementation
};

