const { ethers } = require("hardhat");

async function main() {
  console.log("=== üîç –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –°–¢–ï–ô–ö–ò–ù–ì–ê ===\n");

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
  const accounts = await ethers.getSigners();
  const deployer = accounts[0];
  
  console.log("üë§ Deployer:", deployer.address);
  console.log("");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const CONTRACT_ADDRESSES = {
    PADToken: "0x6D84688A4734F091cD42F6D998d3F3cB4A990849",
    VoucherTypes: "0x2B8De63Dff3cC60b64F36FCB0E72a4f072818B1F",
    VoucherManager: "0xFe267475409db3703597C230C67Fa7dD36C78A4d",
    MultiStakeManager: "0x8D5b8A4841Ed2Dac943DD01B9E51eCC21E17FaAb",
    PADNFTFactory: "0x7d19632e1b76C0667Db471f61a38E60C7B088579",
  };

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
  const PADToken = await ethers.getContractAt("PADToken", CONTRACT_ADDRESSES.PADToken);
  const MultiStakeManager = await ethers.getContractAt("MultiStakeManager", CONTRACT_ADDRESSES.MultiStakeManager);
  const VoucherManager = await ethers.getContractAt("VoucherManager", CONTRACT_ADDRESSES.VoucherManager);
  const PADNFTFactory = await ethers.getContractAt("PADNFTFactory", CONTRACT_ADDRESSES.PADNFTFactory);
  const VoucherTypes = await ethers.getContractAt("VoucherTypes", CONTRACT_ADDRESSES.VoucherTypes);

  console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n");

  // === –¢–ï–°–¢ 1: –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –¢–ò–†–û–í ===
  console.log("=== üè∑Ô∏è –¢–ï–°–¢ 1: –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–ò–†–û–í ===");
  for (let i = 0; i < 4; i++) {
    try {
      const tierInfo = await MultiStakeManager.getTierInfo(i);
      console.log(`–¢–∏—Ä ${i}: ${tierInfo.name}, Min: ${ethers.formatEther(tierInfo.minAmount)} PAD, Max: ${ethers.formatEther(tierInfo.maxAmount)} PAD`);
    } catch (error) {
      console.log(`‚ùå –¢–∏—Ä ${i}: –û—à–∏–±–∫–∞ - ${error.message}`);
    }
  }
  console.log("");

  // === –¢–ï–°–¢ 2: –ü–†–û–í–ï–†–ö–ê –ü–û–ó–ò–¶–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
  console.log("=== üìä –¢–ï–°–¢ 2: –ü–û–ó–ò–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===");
  try {
    const userPositions = await MultiStakeManager.getUserPositions(deployer.address);
    console.log(`‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π: ${userPositions.length}`);
    
    if (userPositions.length > 0) {
      for (let i = 0; i < userPositions.length; i++) {
        const positionId = userPositions[i];
        const position = await MultiStakeManager.getPosition(positionId);
        
        console.log(`\n–ü–æ–∑–∏—Ü–∏—è ${i + 1} (ID: ${position.id}):`);
        console.log(`  –°—É–º–º–∞: ${ethers.formatEther(position.amount)} PAD`);
        console.log(`  –¢–∏—Ä: ${position.tier}`);
        console.log(`  –ê–∫—Ç–∏–≤–Ω–∞: ${position.isActive}`);
        console.log(`  –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date(Number(position.startTime) * 1000).toLocaleString()}`);
        console.log(`  –°–ª–µ–¥—É—é—â–∏–π NFT: ${new Date(Number(position.nextMintOn) * 1000).toLocaleString()}`);
        console.log(`  –ò–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞: ${position.monthIndex}`);
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
  }
  console.log("");

  // === –¢–ï–°–¢ 3: –ü–†–û–í–ï–†–ö–ê –í–ê–£–ß–ï–†–û–í ===
  console.log("=== üé´ –¢–ï–°–¢ 3: –í–ê–£–ß–ï–†–´ ===");
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—É—á–µ—Ä—ã –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏
    const lastPositionId = 4; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∑–∏—Ü–∏—è
    const positionVouchers = await VoucherManager.getPositionVouchers(lastPositionId);
    console.log(`‚úÖ –í–∞—É—á–µ—Ä–æ–≤ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ ${lastPositionId}: ${positionVouchers.length}`);
    
    if (positionVouchers.length > 0) {
      console.log(`\n–ü–µ—Ä–≤—ã–µ 3 –≤–∞—É—á–µ—Ä–∞:`);
      for (let i = 0; i < Math.min(3, positionVouchers.length); i++) {
        const voucherId = positionVouchers[i];
        const voucher = await VoucherManager.getUserVoucher(voucherId);
        
        console.log(`  –í–∞—É—á–µ—Ä ${i + 1}: ID=${voucherId}, –¢–∏–ø=${voucher.voucherTypeId}, –ê–∫—Ç–∏–≤–µ–Ω=${voucher.isActive}`);
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—É—á–µ—Ä–æ–≤: ${error.message}`);
  }
  console.log("");

  // === –¢–ï–°–¢ 4: –ü–†–û–í–ï–†–ö–ê NFT ===
  console.log("=== üñºÔ∏è –¢–ï–°–¢ 4: NFT ===");
  try {
    const nftBalance = await PADNFTFactory.balanceOf(deployer.address);
    console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å NFT: ${nftBalance}`);
    
    if (nftBalance > 0) {
      console.log(`\n–ü–µ—Ä–≤—ã–µ 3 NFT:`);
      for (let i = 0; i < Math.min(3, Number(nftBalance)); i++) {
        const tokenId = await PADNFTFactory.tokenOfOwnerByIndex(deployer.address, i);
        const metadata = await PADNFTFactory.getNFTMetadata(tokenId);
        
        console.log(`  NFT ${i + 1}: TokenID=${tokenId}, PositionID=${metadata.positionId}, –¢–∏—Ä=${metadata.tierLevel}`);
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è NFT: ${error.message}`);
  }
  console.log("");

  // === –¢–ï–°–¢ 5: –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò –°–£–ú–ú ===
  console.log("=== ‚úÖ –¢–ï–°–¢ 5: –í–ê–õ–ò–î–ê–¶–ò–Ø –°–£–ú–ú ===");
  const testCases = [
    { amount: "500", tier: 0, expected: false, description: "500 PAD –¥–ª—è Bronze (—Å–ª–∏—à–∫–æ–º –º–∞–ª–æ)" },
    { amount: "1500", tier: 0, expected: true, description: "1500 PAD –¥–ª—è Bronze (–≤–∞–ª–∏–¥–Ω–æ)" },
    { amount: "2500", tier: 0, expected: false, description: "2500 PAD –¥–ª—è Bronze (—Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)" },
    { amount: "8005", tier: 3, expected: true, description: "8005 PAD –¥–ª—è Platinum (–≤–∞–ª–∏–¥–Ω–æ)" },
  ];
  
  for (const testCase of testCases) {
    try {
      const amount = ethers.parseEther(testCase.amount);
      const isValid = await MultiStakeManager.validateTierAmount(amount, testCase.tier);
      const status = isValid === testCase.expected ? "‚úÖ" : "‚ùå";
      console.log(`${status} ${testCase.description}: ${isValid ? 'VALID' : 'INVALID'}`);
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ "${testCase.description}": ${error.message}`);
    }
  }
  console.log("");

  // === –¢–ï–°–¢ 6: –ü–†–û–í–ï–†–ö–ê –†–û–õ–ï–ô ===
  console.log("=== üîê –¢–ï–°–¢ 6: –†–û–õ–ò –ö–û–ù–¢–†–ê–ö–¢–û–í ===");
  try {
    const VOUCHER_ADMIN_ROLE = await VoucherManager.ADMIN_ROLE();
    const NFT_MINTER_ROLE = await PADNFTFactory.MINTER_ROLE();
    
    const hasVoucherAdminRole = await VoucherManager.hasRole(VOUCHER_ADMIN_ROLE, CONTRACT_ADDRESSES.MultiStakeManager);
    const hasNFTMinterRole = await PADNFTFactory.hasRole(NFT_MINTER_ROLE, CONTRACT_ADDRESSES.MultiStakeManager);
    
    console.log(`MultiStakeManager -> VoucherManager ADMIN_ROLE: ${hasVoucherAdminRole ? "‚úÖ" : "‚ùå"}`);
    console.log(`MultiStakeManager -> PADNFTFactory MINTER_ROLE: ${hasNFTMinterRole ? "‚úÖ" : "‚ùå"}`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π: ${error.message}`);
  }
  console.log("");

  // === –¢–ï–°–¢ 7: –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í ===
  console.log("=== üí∞ –¢–ï–°–¢ 7: –ë–ê–õ–ê–ù–°–´ ===");
  try {
    const balance = await PADToken.balanceOf(deployer.address);
    const allowance = await PADToken.allowance(deployer.address, CONTRACT_ADDRESSES.MultiStakeManager);
    
    console.log(`–ë–∞–ª–∞–Ω—Å PAD: ${ethers.formatEther(balance)} PAD`);
    console.log(`Allowance -> MultiStakeManager: ${ethers.formatEther(allowance)} PAD`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤: ${error.message}`);
  }
  console.log("");

  // === –¢–ï–°–¢ 8: –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–¢–ï–ô–ö–ò–ù–ì–ê ===
  console.log("=== üß™ –¢–ï–°–¢ 8: –°–ò–ú–£–õ–Ø–¶–ò–Ø –°–¢–ï–ô–ö–ò–ù–ì–ê ===");
  try {
    const testAmount = ethers.parseEther("1200"); // Bronze tier
    const testTier = 0;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    const isValid = await MultiStakeManager.validateTierAmount(testAmount, testTier);
    console.log(`–í–∞–ª–∏–¥–∞—Ü–∏—è 1200 PAD –¥–ª—è Bronze: ${isValid ? "‚úÖ VALID" : "‚ùå INVALID"}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const balance = await PADToken.balanceOf(deployer.address);
    const hasEnoughBalance = balance >= testAmount;
    console.log(`–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞: ${hasEnoughBalance ? "‚úÖ" : "‚ùå"}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance
    const allowance = await PADToken.allowance(deployer.address, CONTRACT_ADDRESSES.MultiStakeManager);
    const hasEnoughAllowance = allowance >= testAmount;
    console.log(`–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ allowance: ${hasEnoughAllowance ? "‚úÖ" : "‚ùå"}`);
    
    console.log(`\n–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–º—É–ª—è—Ü–∏–∏: ${isValid && hasEnoughBalance && hasEnoughAllowance ? "‚úÖ –ì–û–¢–û–í –ö –°–¢–ï–ô–ö–ò–ù–ì–£" : "‚ùå –ù–ï –ì–û–¢–û–í"}`);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: ${error.message}`);
  }
  console.log("");

  console.log("=== üéâ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
