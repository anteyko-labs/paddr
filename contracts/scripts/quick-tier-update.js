const { ethers } = require('hardhat');

async function main() {
  console.log('‚ö° Quick Tier Requirements Update\n');
  
  // –ê–¥—Ä–µ—Å TierWeightManager
  const TIER_WEIGHT_MANAGER_ADDRESS = "0x18DDd61369C2DD3ea1144d6E440eA22d50fa384a";
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ç–∏
  const provider = new ethers.JsonRpcProvider('https://sepolia.infura.io/v3/01fd1d3959ec4dd3afbef724e8c959da');
  const wallet = new ethers.Wallet('22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba', provider);
  
  // ABI –¥–ª—è TierWeightManager
  const TIER_WEIGHT_MANAGER_ABI = [
    "function setTierMinAmount(uint8 tier, uint256 minAmount) external",
    "function getTierMinAmount(uint8 tier) external view returns (uint256)"
  ];
  
  const tierWeightManager = new ethers.Contract(TIER_WEIGHT_MANAGER_ADDRESS, TIER_WEIGHT_MANAGER_ABI, wallet);
  
  // –¢–µ–∫—É—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  console.log('üìã Current Tier Requirements:');
  for (let tier = 0; tier < 4; tier++) {
    try {
      const currentAmount = await tierWeightManager.getTierMinAmount(tier);
      console.log(`Tier ${tier}: ${ethers.formatEther(currentAmount)} tokens`);
    } catch (error) {
      console.log(`Tier ${tier}: Error reading current amount`);
    }
  }
  console.log('');
  
  // –ù–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤ 2 —Ä–∞–∑–∞)
  const newRequirements = {
    0: ethers.parseEther("1000"),  // Bronze: 1000 —Ç–æ–∫–µ–Ω–æ–≤ (–±—ã–ª–æ 500)
    1: ethers.parseEther("2000"),  // Silver: 2000 —Ç–æ–∫–µ–Ω–æ–≤ (–±—ã–ª–æ 1000)
    2: ethers.parseEther("6000"),  // Gold: 6000 —Ç–æ–∫–µ–Ω–æ–≤ (–±—ã–ª–æ 3000)
    3: ethers.parseEther("8000")   // Platinum: 8000 —Ç–æ–∫–µ–Ω–æ–≤ (–±—ã–ª–æ 4000)
  };
  
  console.log('üéØ New Tier Requirements:');
  for (const [tier, amount] of Object.entries(newRequirements)) {
    console.log(`Tier ${tier}: ${ethers.formatEther(amount)} tokens`);
  }
  console.log('');
  
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  console.log('üîÑ Updating tier requirements...');
  for (const [tierNum, newAmount] of Object.entries(newRequirements)) {
    const tier = parseInt(tierNum);
    
    try {
      console.log(`Updating Tier ${tier} to ${ethers.formatEther(newAmount)} tokens...`);
      
      const tx = await tierWeightManager.setTierMinAmount(tier, newAmount);
      await tx.wait();
      
      console.log(`‚úÖ Tier ${tier} updated successfully!`);
      console.log(`   Transaction: ${tx.hash}`);
      
    } catch (error) {
      console.log(`‚ùå Failed to update Tier ${tier}: ${error.message}`);
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  console.log('\nüîç Verifying updated requirements:');
  for (let tier = 0; tier < 4; tier++) {
    try {
      const updatedAmount = await tierWeightManager.getTierMinAmount(tier);
      console.log(`Tier ${tier}: ${ethers.formatEther(updatedAmount)} tokens`);
    } catch (error) {
      console.log(`Tier ${tier}: Error reading updated amount`);
    }
  }
  
  console.log('\n‚úÖ Tier requirements updated successfully!');
  console.log('üéØ Users will now need to stake more tokens for each tier!');
  console.log('üìà This will increase the value of each tier and make staking more exclusive!');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå Script failed:', error);
    process.exit(1);
  });
