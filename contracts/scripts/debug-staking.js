const { ethers } = require("hardhat");

async function main() {
  console.log("=== üêõ –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –°–¢–ï–ô–ö–ò–ù–ì–ê ===\n");

  // –ü–æ–ª—É—á–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
  const accounts = await ethers.getSigners();
  const deployer = accounts[0];
  
  console.log("üë§ Deployer:", deployer.address);
  console.log("");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
  const CONTRACT_ADDRESSES = {
    PADToken: "0x6D84688A4734F091cD42F6D998d3F3cB4A990849",
    VoucherTypes: "0x2B8De63Dff3cC60b64F36FCB0E72a4f072818B1F",
    VoucherManager: "0xFe267475409db3703597C230C67Fa7dD36C78A4d",
    MultiStakeManager: "0x8D5b8A4841Ed2Dac943DD01B9E51eCC21E17FaAb",
    PADNFTFactory: "0x7d19632e1b76C0667Db471f61a38E60C7B088579",
  };

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º
  const PADToken = await ethers.getContractAt("PADToken", CONTRACT_ADDRESSES.PADToken);
  const MultiStakeManager = await ethers.getContractAt("MultiStakeManager", CONTRACT_ADDRESSES.MultiStakeManager);
  const VoucherManager = await ethers.getContractAt("VoucherManager", CONTRACT_ADDRESSES.VoucherManager);
  const PADNFTFactory = await ethers.getContractAt("PADNFTFactory", CONTRACT_ADDRESSES.PADNFTFactory);

  console.log("‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –ë–ê–õ–ê–ù–°–´ –ò ALLOWANCE ===
  console.log("=== üí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í ===");
  const balance = await PADToken.balanceOf(deployer.address);
  const allowance = await PADToken.allowance(deployer.address, CONTRACT_ADDRESSES.MultiStakeManager);
  
  console.log(`–ë–∞–ª–∞–Ω—Å deployer: ${ethers.formatEther(balance)} PAD`);
  console.log(`Allowance -> MultiStakeManager: ${ethers.formatEther(allowance)} PAD`);
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Æ –¢–ò–†–û–í ===
  console.log("=== üè∑Ô∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –¢–ò–†–û–í ===");
  for (let i = 0; i < 4; i++) {
    try {
      const tierInfo = await MultiStakeManager.getTierInfo(i);
      console.log(`–¢–∏—Ä ${i}: ${tierInfo.name}, Min: ${ethers.formatEther(tierInfo.minAmount)} PAD, Max: ${ethers.formatEther(tierInfo.maxAmount)} PAD`);
    } catch (error) {
      console.log(`–¢–∏—Ä ${i}: –û—à–∏–±–∫–∞ - ${error.message}`);
    }
  }
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –í–ê–õ–ò–î–ê–¶–ò–Ø –°–£–ú–ú ===
  console.log("=== ‚úÖ –ü–†–û–í–ï–†–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò –°–£–ú–ú ===");
  const testAmount = ethers.parseEther("8005"); // Platinum tier
  const testTier = 3; // Platinum
  
  try {
    const isValid = await MultiStakeManager.validateTierAmount(testAmount, testTier);
    console.log(`–°—É–º–º–∞ ${ethers.formatEther(testAmount)} PAD –¥–ª—è —Ç–∏—Ä–∞ ${testTier}: ${isValid ? 'VALID' : 'INVALID'}`);
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`);
  }
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï –ü–û–ó–ò–¶–ò–ò ===
  console.log("=== üìä –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–£–Æ–©–ò–• –ü–û–ó–ò–¶–ò–ô ===");
  try {
    const userPositions = await MultiStakeManager.getUserPositions(deployer.address);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userPositions.length}`);
    
    if (userPositions.length > 0) {
      for (let i = 0; i < userPositions.length; i++) {
        const positionId = userPositions[i];
        const position = await MultiStakeManager.getPosition(positionId);
        
        console.log(`\n–ü–æ–∑–∏—Ü–∏—è ${i + 1}:`);
        console.log(`  ID: ${position.id}`);
        console.log(`  –í–ª–∞–¥–µ–ª–µ—Ü: ${position.owner}`);
        console.log(`  –°—É–º–º–∞: ${ethers.formatEther(position.amount)} PAD`);
        console.log(`  –¢–∏—Ä: ${position.tier}`);
        console.log(`  –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date(Number(position.startTime) * 1000).toLocaleString()}`);
        console.log(`  –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${new Date(Number(position.endTime) * 1000).toLocaleString()}`);
        console.log(`  –ê–∫—Ç–∏–≤–Ω–∞: ${position.isActive}`);
        console.log(`  –°–ª–µ–¥—É—é—â–∏–π NFT: ${new Date(Number(position.nextMintOn) * 1000).toLocaleString()}`);
        console.log(`  –ò–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞: ${position.monthIndex}`);
      }
    }
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∑–∏—Ü–∏–π: ${error.message}`);
  }
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú –í–ê–£–ß–ï–†–´ ===
  console.log("=== üé´ –ü–†–û–í–ï–†–ö–ê –í–ê–£–ß–ï–†–û–í ===");
  try {
    const userVoucherIds = await VoucherManager.userVoucherIds(deployer.address);
    console.log(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—É—á–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userVoucherIds.length}`);
    
    if (userVoucherIds.length > 0) {
      for (let i = 0; i < Math.min(userVoucherIds.length, 3); i++) {
        const voucherId = userVoucherIds[i];
        const voucher = await VoucherManager.userVouchers(voucherId);
        
        console.log(`\n–í–∞—É—á–µ—Ä ${i + 1}:`);
        console.log(`  ID: ${voucher.id}`);
        console.log(`  –¢–∏–ø: ${voucher.voucherTypeId}`);
        console.log(`  –ü–æ–∑–∏—Ü–∏—è: ${voucher.positionId}`);
        console.log(`  –¢–∏—Ä: ${voucher.tier}`);
        console.log(`  –í—ã–¥–∞–Ω: ${new Date(Number(voucher.issuedAt) * 1000).toLocaleString()}`);
        console.log(`  –ê–∫—Ç–∏–≤–µ–Ω: ${voucher.isActive}`);
        console.log(`  –ö–æ–¥: ${voucher.voucherCode}`);
      }
    }
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—É—á–µ—Ä–æ–≤: ${error.message}`);
  }
  console.log("");

  // === –ü–†–û–í–ï–†–Ø–ï–ú NFT ===
  console.log("=== üñºÔ∏è –ü–†–û–í–ï–†–ö–ê NFT ===");
  try {
    const balance = await PADNFTFactory.balanceOf(deployer.address);
    console.log(`–ë–∞–ª–∞–Ω—Å NFT –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${balance}`);
    
    if (balance > 0) {
      for (let i = 0; i < Math.min(Number(balance), 3); i++) {
        const tokenId = await PADNFTFactory.tokenOfOwnerByIndex(deployer.address, i);
        const metadata = await PADNFTFactory.getNFTMetadata(tokenId);
        
        console.log(`\nNFT ${i + 1}:`);
        console.log(`  Token ID: ${tokenId}`);
        console.log(`  Position ID: ${metadata.positionId}`);
        console.log(`  –°—É–º–º–∞: ${ethers.formatEther(metadata.amountStaked)} PAD`);
        console.log(`  –¢–∏—Ä: ${metadata.tierLevel}`);
        console.log(`  –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date(Number(metadata.startTimestamp) * 1000).toLocaleString()}`);
        console.log(`  –ò–Ω–¥–µ–∫—Å –º–µ—Å—è—Ü–∞: ${metadata.monthIndex}`);
      }
    }
  } catch (error) {
    console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ NFT: ${error.message}`);
  }
  console.log("");

  console.log("=== üîç –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });
