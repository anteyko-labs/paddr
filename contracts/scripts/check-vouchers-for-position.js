const { ethers } = require('hardhat');

async function main() {
  console.log('üé´ Checking vouchers for position...\n');
  
  const [deployer] = await ethers.getSigners();
  console.log('Checking with account:', deployer.address);
  
  // –ê–¥—Ä–µ—Å–∞ —Å–∏—Å—Ç–µ–º—ã
  const VOUCHER_MANAGER_ADDRESS = "0x5D89adf43cb9018Ed502062a7F012a7d101893c6";
  const PROXY_STAKE_MANAGER = "0xAa2b43eC5EA29B7B9675676DAd91a764E823B520";
  
  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã
  const VoucherManager = await ethers.getContractFactory('VoucherManager');
  const voucherManager = VoucherManager.attach(VOUCHER_MANAGER_ADDRESS);
  
  const UpgradeableMultiStakeManagerV2 = await ethers.getContractFactory('UpgradeableMultiStakeManagerV2');
  const stakeManagerProxy = UpgradeableMultiStakeManagerV2.attach(PROXY_STAKE_MANAGER);
  
  console.log('üìã Voucher Manager:', VOUCHER_MANAGER_ADDRESS);
  console.log('üìã Stake Manager:', PROXY_STAKE_MANAGER);
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\nüîç Checking user positions...');
  try {
    const userPositions = await stakeManagerProxy.getUserPositions(deployer.address);
    console.log('‚úÖ User positions count:', userPositions.length);
    
    if (userPositions.length > 0) {
      console.log('üìã Position IDs:', userPositions.map(id => id.toString()));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∂–¥–æ–π –ø–æ–∑–∏—Ü–∏–∏
      for (const positionId of userPositions) {
        const position = await stakeManagerProxy.positions(positionId);
        console.log(`\nüìã Position ${positionId}:`);
        console.log('  - Amount:', ethers.formatEther(position.amount), 'PAD');
        console.log('  - Duration:', Number(position.duration), 'seconds');
        console.log('  - Tier:', position.tier);
        console.log('  - Is active:', position.isActive);
      }
    }
  } catch (error) {
    console.log('‚ùå Error checking positions:', error.message);
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—É—á–µ—Ä—ã –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏ 0
  console.log('\nüé´ Checking vouchers for position 0...');
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—É—á–µ—Ä–æ–≤ –ø–æ–∑–∏—Ü–∏–∏
    const voucherCount = await voucherManager.getVoucherCountForPosition(0);
    console.log('‚úÖ Voucher count for position 0:', voucherCount.toString());
    
    if (voucherCount > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞—É—á–µ—Ä–æ–≤
      for (let i = 0; i < Number(voucherCount); i++) {
        const voucherId = await voucherManager.getVoucherIdForPosition(0, i);
        console.log(`üìã Voucher ${i}:`, voucherId.toString());
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞—É—á–µ—Ä–∞
        const voucher = await voucherManager.vouchers(voucherId);
        console.log(`  - Type: ${voucher.voucherType}`);
        console.log(`  - Value: ${voucher.value}`);
        console.log(`  - Used: ${voucher.used}`);
        console.log(`  - Expires: ${new Date(Number(voucher.expiresAt) * 1000).toLocaleString()}`);
      }
    }
  } catch (error) {
    console.log('‚ùå Error checking vouchers:', error.message);
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—É—á–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  console.log('\nüé´ Checking total user vouchers...');
  try {
    const userVoucherCount = await voucherManager.getUserVoucherCount(deployer.address);
    console.log('‚úÖ Total user vouchers:', userVoucherCount.toString());
  } catch (error) {
    console.log('‚ùå Error checking user vouchers:', error.message);
  }
  
  // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT –±–∞–ª–∞–Ω—Å
  console.log('\nüé® Checking NFT balance...');
  try {
    const NFT_FACTORY_ADDRESS = "0x6D87c4647bd91743ce69d8cd2eD568A6d892cd33";
    const PADNFTFactory = await ethers.getContractFactory('PADNFTFactory');
    const nftFactory = PADNFTFactory.attach(NFT_FACTORY_ADDRESS);
    
    const nftBalance = await nftFactory.balanceOf(deployer.address);
    console.log('‚úÖ NFT balance:', nftBalance.toString());
  } catch (error) {
    console.log('‚ùå Error checking NFT balance:', error.message);
  }
  
  console.log('\nüéâ Voucher check complete!');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });