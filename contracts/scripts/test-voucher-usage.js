const { ethers } = require('ethers');

async function main() {
  console.log('üß™ Testing voucher usage - marking all active vouchers as used once...\n');
  
  // –ê–¥—Ä–µ—Å VoucherManager
  const VOUCHER_MANAGER_ADDRESS = "0x5D89adf43cb9018Ed502062a7F012a7d101893c6";
  
  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ç–∏
  const provider = new ethers.JsonRpcProvider('https://sepolia.infura.io/v3/01fd1d3959ec4dd3afbef724e8c959da');
  const wallet = new ethers.Wallet('22547068237db8ba6738009e6cc6279e33cec1d5665033b0b881fc49b11e71ba', provider);
  
  // ABI –¥–ª—è VoucherManager
  const VOUCHER_MANAGER_ABI = [
    "function getVoucher(uint256 voucherId) external view returns (tuple(uint256 id, address owner, uint8 voucherType, string name, string description, string value, uint256 maxUses, uint256 currentUses, uint256 expiresAt, bool isActive, string qrCode, uint256 positionId))",
    "function isVoucherValid(uint256 voucherId) external view returns (bool)",
    "function deactivateVoucher(uint256 voucherId) external",
    "function redeemVoucherById(uint256 voucherId) external returns (bool)"
  ];
  
  const voucherManager = new ethers.Contract(VOUCHER_MANAGER_ADDRESS, VOUCHER_MANAGER_ABI, wallet);
  
  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞—É—á–µ—Ä—ã
  const activeVouchers = [];
  
  for (let voucherId = 1; voucherId <= 20; voucherId++) {
    try {
      const voucher = await voucherManager.getVoucher(voucherId);
      const isValid = await voucherManager.isVoucherValid(voucherId);
      
      if (voucher.name !== "" && voucher.name !== "0" && voucher.isActive && isValid && voucher.currentUses == 0) {
        activeVouchers.push({
          id: voucherId,
          name: voucher.name,
          owner: voucher.owner,
          currentUses: voucher.currentUses.toString(),
          maxUses: voucher.maxUses.toString(),
          type: voucher.voucherType === 0 ? 'Single Use' : 
                voucher.voucherType === 1 ? 'Multi Use' : 'Duration'
        });
      }
    } catch (error) {
      // –í–∞—É—á–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
    }
  }
  
  console.log(`üìã Found ${activeVouchers.length} active vouchers to test:`);
  activeVouchers.forEach(voucher => {
    console.log(`   ID ${voucher.id}: ${voucher.name} (${voucher.type}) - Uses: ${voucher.currentUses}/${voucher.maxUses}`);
  });
  console.log('');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ –≤–∞—É—á–µ—Ä–∞
  for (const voucher of activeVouchers) {
    try {
      console.log(`üîÑ Testing voucher ID ${voucher.id}: ${voucher.name}...`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—É—á–µ—Ä —á–µ—Ä–µ–∑ redeemVoucherById
      try {
        const tx = await voucherManager.redeemVoucherById(voucher.id);
        await tx.wait();
        console.log(`   ‚úÖ Voucher ${voucher.id} redeemed successfully!`);
        console.log(`   üìã Transaction: ${tx.hash}`);
      } catch (redeemError) {
        console.log(`   ‚ö†Ô∏è  redeemVoucherById failed: ${redeemError.message}`);
        
        // –ï—Å–ª–∏ redeemVoucherById –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º deactivateVoucher
        try {
          const tx = await voucherManager.deactivateVoucher(voucher.id);
          await tx.wait();
          console.log(`   ‚úÖ Voucher ${voucher.id} deactivated successfully!`);
          console.log(`   üìã Transaction: ${tx.hash}`);
        } catch (deactivateError) {
          console.log(`   ‚ùå deactivateVoucher also failed: ${deactivateError.message}`);
        }
      }
      
    } catch (error) {
      console.log(`   ‚ùå Failed to test voucher ${voucher.id}: ${error.message}`);
    }
    
    console.log('');
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  console.log('üîç Checking results after testing...');
  
  const updatedVouchers = [];
  for (let voucherId = 1; voucherId <= 20; voucherId++) {
    try {
      const voucher = await voucherManager.getVoucher(voucherId);
      const isValid = await voucherManager.isVoucherValid(voucherId);
      
      if (voucher.name !== "" && voucher.name !== "0") {
        updatedVouchers.push({
          id: voucherId,
          name: voucher.name,
          owner: voucher.owner,
          currentUses: voucher.currentUses.toString(),
          maxUses: voucher.maxUses.toString(),
          isActive: voucher.isActive,
          isValid: isValid,
          type: voucher.voucherType === 0 ? 'Single Use' : 
                voucher.voucherType === 1 ? 'Multi Use' : 'Duration'
        });
      }
    } catch (error) {
      // –í–∞—É—á–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞
    }
  }
  
  console.log('\nüìä UPDATED VOUCHER STATUS:');
  updatedVouchers.forEach(voucher => {
    const status = voucher.isActive && voucher.isValid ? 
                  (voucher.currentUses > 0 ? 'üîÑ USED' : '‚úÖ ACTIVE') : 
                  '‚ùå INVALID';
    console.log(`   ID ${voucher.id}: ${voucher.name} (${voucher.type}) - ${status} - Uses: ${voucher.currentUses}/${voucher.maxUses}`);
  });
  
  console.log('\nüéØ TESTING COMPLETED!');
  console.log('‚úÖ All active vouchers have been tested for usage');
  console.log('‚úÖ Check the results above to see which vouchers are now marked as used');
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error('‚ùå Script failed:', error);
    process.exit(1);
  });

