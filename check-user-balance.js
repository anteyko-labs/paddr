const { ethers } = require('ethers');

// BSC Testnet –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BSC_RPC = 'https://data-seed-prebsc-1-s1.binance.org:8545/';
const PAD_TOKEN_ADDRESS = '0x6e54ef83eD01B718c92DDEb2629E9849eDe5b94F';
const USER_ADDRESS = '0x513756b7eD711c472537cb497833c5d5Eb02A3Df';

const ERC20_ABI = [
  "function balanceOf(address) view returns (uint256)",
  "function allowance(address,address) view returns (uint256)"
];

async function checkUserBalance() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');
  
  try {
    const provider = new ethers.JsonRpcProvider(BSC_RPC);
    const padToken = new ethers.Contract(PAD_TOKEN_ADDRESS, ERC20_ABI, provider);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å PAD —Ç–æ–∫–µ–Ω–æ–≤
    const balance = await padToken.balanceOf(USER_ADDRESS);
    const balanceFormatted = ethers.formatEther(balance);
    
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å PAD —Ç–æ–∫–µ–Ω–æ–≤: ${balanceFormatted} PAD`);
    
    if (balance === 0n) {
      console.log('\n‚ùå –£ –≤–∞—Å –Ω–µ—Ç PAD —Ç–æ–∫–µ–Ω–æ–≤!');
      console.log('üîß –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –æ—Ç –¥–µ–ø–ª–æ–µ—Ä–∞...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–µ—Ä–∞
      const deployerAddress = '0x513756b7eD711c472537cb497833c5d5Eb02A3Df';
      const deployerBalance = await padToken.balanceOf(deployerAddress);
      const deployerBalanceFormatted = ethers.formatEther(deployerBalance);
      
      console.log(`\nüìä –ë–∞–ª–∞–Ω—Å –¥–µ–ø–ª–æ–µ—Ä–∞: ${deployerBalanceFormatted} PAD`);
      
      if (deployerBalance > 0n) {
        console.log('‚úÖ –î–µ–ø–ª–æ–µ—Ä –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã');
        console.log('üí° –ù—É–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å transfer() –æ—Ç –¥–µ–ø–ª–æ–µ—Ä–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
      }
    } else {
      console.log('‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å PAD —Ç–æ–∫–µ–Ω—ã!');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º allowance –¥–ª—è StakeManager
      const STAKE_MANAGER_ADDRESS = '0xdFb58CEe97B91178555CfAC3bE976e925F9De2e3';
      const allowance = await padToken.allowance(USER_ADDRESS, STAKE_MANAGER_ADDRESS);
      const allowanceFormatted = ethers.formatEther(allowance);
      
      console.log(`üîê Allowance –¥–ª—è StakeManager: ${allowanceFormatted} PAD`);
      
      if (allowance === 0n) {
        console.log('‚ö†Ô∏è –ù—É–∂–Ω–æ –æ–¥–æ–±—Ä–∏—Ç—å StakeManager –¥–ª—è —Ç—Ä–∞—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤');
      } else {
        console.log('‚úÖ Allowance –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkUserBalance().catch(console.error);
