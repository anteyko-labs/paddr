const fs = require('fs');
const path = require('path');

/**
 * –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */

console.log('üîí –ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞...\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
function checkContractSecurity() {
  console.log('üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:');
  
  const contracts = [
    'contracts/contracts/UpgradeableMultiStakeManager.sol',
    'contracts/contracts/TierWeightManager.sol',
    'contracts/contracts/ProxyFactory.sol',
    'contracts/contracts/PADNFTFactory.sol',
    'contracts/contracts/VoucherManager.sol'
  ];
  
  let securityIssues = [];
  
  contracts.forEach(contract => {
    const contractPath = path.join(process.cwd(), contract);
    if (fs.existsSync(contractPath)) {
      const content = fs.readFileSync(contractPath, 'utf8');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ReentrancyGuard
      if (!content.includes('ReentrancyGuard')) {
        securityIssues.push(`‚ùå ${contract}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ReentrancyGuard`);
      } else {
        console.log(`  ‚úÖ ${contract}: ReentrancyGuard –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ AccessControl
      if (!content.includes('AccessControl')) {
        securityIssues.push(`‚ùå ${contract}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç AccessControl`);
      } else {
        console.log(`  ‚úÖ ${contract}: AccessControl –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–¥—Ä–µ—Å–æ–≤
      if (!content.includes('require(') && !content.includes('assert(')) {
        securityIssues.push(`‚ùå ${contract}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ require/assert`);
      } else {
        console.log(`  ‚úÖ ${contract}: –ü—Ä–æ–≤–µ—Ä–∫–∏ require/assert –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ–±—ã—Ç–∏–π
      if (!content.includes('event ')) {
        securityIssues.push(`‚ùå ${contract}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–æ–±—ã—Ç–∏—è`);
      } else {
        console.log(`  ‚úÖ ${contract}: –°–æ–±—ã—Ç–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤
      if (!content.includes('modifier ')) {
        securityIssues.push(`‚ùå ${contract}: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã`);
      } else {
        console.log(`  ‚úÖ ${contract}: –ú–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
      
    } else {
      securityIssues.push(`‚ùå ${contract}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  return securityIssues;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º—É
function checkProxySystem() {
  console.log('\nüîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º—ã:');
  
  const proxyFiles = [
    'contracts/contracts/UpgradeableMultiStakeManager.sol',
    'contracts/contracts/TierWeightManager.sol',
    'contracts/contracts/ProxyFactory.sol',
    'contracts/scripts/deployProxySystem.js'
  ];
  
  let proxyIssues = [];
  
  proxyFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      if (file.includes('UpgradeableMultiStakeManager')) {
        if (!content.includes('TransparentUpgradeableProxy')) {
          proxyIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TransparentUpgradeableProxy`);
        } else {
          console.log(`  ‚úÖ ${file}: TransparentUpgradeableProxy –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
        
        if (!content.includes('initialize')) {
          proxyIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—è initialize`);
        } else {
          console.log(`  ‚úÖ ${file}: –§—É–Ω–∫—Ü–∏—è initialize –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      if (file.includes('TierWeightManager')) {
        if (!content.includes('configVersion')) {
          proxyIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç configVersion`);
        } else {
          console.log(`  ‚úÖ ${file}: configVersion –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      if (file.includes('ProxyFactory')) {
        if (!content.includes('ProxyAdmin')) {
          proxyIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ProxyAdmin`);
        } else {
          console.log(`  ‚úÖ ${file}: ProxyAdmin –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
    } else {
      proxyIssues.push(`‚ùå ${file}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  return proxyIssues;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º NFT —Å–∏—Å—Ç–µ–º—É
function checkNFTSystem() {
  console.log('\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ NFT —Å–∏—Å—Ç–µ–º—ã:');
  
  const nftFiles = [
    'contracts/contracts/PADNFTFactory.sol',
    'components/dashboard/nft-display.tsx',
    'components/dashboard/nft-video-display.tsx',
    'hooks/useNFTBalance.ts'
  ];
  
  let nftIssues = [];
  
  nftFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      if (file.includes('PADNFTFactory.sol')) {
        if (!content.includes('ERC721A')) {
          nftIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ERC721A`);
        } else {
          console.log(`  ‚úÖ ${file}: ERC721A –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
        
        if (!content.includes('_beforeTokenTransfers')) {
          nftIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç _beforeTokenTransfers`);
        } else {
          console.log(`  ‚úÖ ${file}: _beforeTokenTransfers –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      if (file.includes('nft-display.tsx')) {
        if (!content.includes('useNFTBalance')) {
          nftIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç useNFTBalance`);
        } else {
          console.log(`  ‚úÖ ${file}: useNFTBalance –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      if (file.includes('nft-video-display.tsx')) {
        if (!content.includes('video')) {
          nftIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ`);
        } else {
          console.log(`  ‚úÖ ${file}: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
    } else {
      nftIssues.push(`‚ùå ${file}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  return nftIssues;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–µ–π–∫–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—É
function checkStakingSystem() {
  console.log('\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–µ–π–∫–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã:');
  
  const stakingFiles = [
    'contracts/contracts/UpgradeableMultiStakeManager.sol',
    'components/dashboard/staking-form.tsx',
    'hooks/useStakingPositions.ts',
    'hooks/usePadBalance.ts'
  ];
  
  let stakingIssues = [];
  
  stakingFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      if (file.includes('UpgradeableMultiStakeManager.sol')) {
        if (!content.includes('mintNextNFT')) {
          stakingIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç mintNextNFT`);
        } else {
          console.log(`  ‚úÖ ${file}: mintNextNFT –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
        
        if (!content.includes('REWARD_INTERVAL')) {
          stakingIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç REWARD_INTERVAL`);
        } else {
          console.log(`  ‚úÖ ${file}: REWARD_INTERVAL –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      if (file.includes('staking-form.tsx')) {
        if (!content.includes('useProxySystem')) {
          stakingIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç useProxySystem`);
        } else {
          console.log(`  ‚úÖ ${file}: useProxySystem –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
    } else {
      stakingIssues.push(`‚ùå ${file}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  return stakingIssues;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
function checkFrontendSecurity() {
  console.log('\nüñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞:');
  
  const frontendFiles = [
    'app/api/vouchers/route.ts',
    'app/api/admin/tiers/route.ts',
    'app/api/admin/nft-assets/route.ts',
    'app/api/admin/upload/route.ts'
  ];
  
  let frontendIssues = [];
  
  frontendFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      if (!content.includes('NextRequest') && !content.includes('NextResponse')) {
        frontendIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç NextRequest/NextResponse`);
      } else {
        console.log(`  ‚úÖ ${file}: NextRequest/NextResponse –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
      
      if (!content.includes('try') && !content.includes('catch')) {
        frontendIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫`);
      } else {
        console.log(`  ‚úÖ ${file}: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
      
    } else {
      frontendIssues.push(`‚ùå ${file}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  return frontendIssues;
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
function checkConfiguration() {
  console.log('\n‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:');
  
  const configFiles = [
    'lib/contracts/config.ts',
    'lib/wagmi.ts',
    'next.config.js',
    'tailwind.config.ts'
  ];
  
  let configIssues = [];
  
  configFiles.forEach(file => {
    const filePath = path.join(process.cwd(), file);
    if (fs.existsSync(filePath)) {
      const content = fs.readFileSync(filePath, 'utf8');
      
      if (file.includes('config.ts')) {
        if (!content.includes('TIER_LEVELS')) {
          configIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç TIER_LEVELS`);
        } else {
          console.log(`  ‚úÖ ${file}: TIER_LEVELS –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
      if (file.includes('wagmi.ts')) {
        if (!content.includes('createConfig')) {
          configIssues.push(`‚ùå ${file}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç createConfig`);
        } else {
          console.log(`  ‚úÖ ${file}: createConfig –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      }
      
    } else {
      configIssues.push(`‚ùå ${file}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }
  });
  
  return configIssues;
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–¥–∏—Ç–∞
function main() {
  console.log('üîí –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞\n');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å–∏—Å—Ç–µ–º—ã
    const contractIssues = checkContractSecurity();
    const proxyIssues = checkProxySystem();
    const nftIssues = checkNFTSystem();
    const stakingIssues = checkStakingSystem();
    const frontendIssues = checkFrontendSecurity();
    const configIssues = checkConfiguration();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
    const allIssues = [
      ...contractIssues,
      ...proxyIssues,
      ...nftIssues,
      ...stakingIssues,
      ...frontendIssues,
      ...configIssues
    ];
    
    console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
    console.log(`   üìÑ –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${contractIssues.length + proxyIssues.length + nftIssues.length + stakingIssues.length + frontendIssues.length + configIssues.length}`);
    console.log(`   ‚ùå –ü—Ä–æ–±–ª–µ–º –Ω–∞–π–¥–µ–Ω–æ: ${allIssues.length}`);
    console.log(`   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞: ${allIssues.length === 0 ? '–î–ê' : '–ù–ï–¢'}`);
    
    if (allIssues.length > 0) {
      console.log('\nüö® –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:');
      allIssues.forEach(issue => {
        console.log(`   ${issue}`);
      });
    } else {
      console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!');
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    const report = {
      timestamp: new Date().toISOString(),
      totalIssues: allIssues.length,
      issues: allIssues,
      systems: {
        contracts: contractIssues.length,
        proxy: proxyIssues.length,
        nft: nftIssues.length,
        staking: stakingIssues.length,
        frontend: frontendIssues.length,
        config: configIssues.length
      }
    };
    
    fs.writeFileSync('SECURITY_AUDIT_REPORT.json', JSON.stringify(report, null, 2));
    console.log('\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: SECURITY_AUDIT_REPORT.json');
    
    console.log('\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:');
    if (allIssues.length === 0) {
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ –º–µ–π–Ω–Ω–µ—Ç');
      console.log('‚úÖ –ü—Ä–æ–∫—Å–∏ —Å–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞');
      console.log('‚úÖ NFT —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ –°—Ç–µ–π–∫–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—â–µ–Ω–∞');
      console.log('‚úÖ –§—Ä–æ–Ω—Ç–µ–Ω–¥ –±–µ–∑–æ–ø–∞—Å–µ–Ω');
    } else {
      console.log('‚ö†Ô∏è –ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º');
      console.log('‚ö†Ô∏è –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞—É–¥–∏—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∞—É–¥–∏—Ç
main();




