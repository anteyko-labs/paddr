const fs = require('fs');
const path = require('path');

/**
 * –ü—Ä–æ—Å—Ç–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
 * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ PDF —Ñ–∞–π–ª–æ–≤
 */

console.log('üé´ –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤–∞—É—á–µ—Ä–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n');

// –ü–∞–ø–∫–∏ —Å PDF –≤–∞—É—á–µ—Ä–∞–º–∏
const TIER_FOLDERS = {
  'BRONZE': 'BRONZE',
  'SILVER': 'SILVER', 
  'GOLD': 'GOLD',
  'PLATINUM': 'PLATINUM'
};

// –ü–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const OUTPUT_FOLDERS = {
  'BRONZE': 'public/assets/tier1',
  'SILVER': 'public/assets/tier2',
  'GOLD': 'public/assets/tier3', 
  'PLATINUM': 'public/assets/tier4'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dirPath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function createImagePlaceholder(pdfPath, outputPath, voucherName) {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π SVG –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
    const svgContent = `
<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
  <rect width="400" height="300" fill="#1f2937" stroke="#374151" stroke-width="2"/>
  <rect x="20" y="20" width="360" height="260" fill="#111827" stroke="#4b5563" stroke-width="1"/>
  
  <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ -->
  <text x="200" y="60" text-anchor="middle" fill="#10b981" font-family="Arial, sans-serif" font-size="18" font-weight="bold">
    ${voucherName}
  </text>
  
  <!-- –ò–∫–æ–Ω–∫–∞ PDF -->
  <rect x="150" y="100" width="100" height="80" fill="#dc2626" stroke="#ef4444" stroke-width="2"/>
  <text x="200" y="150" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="24" font-weight="bold">
    PDF
  </text>
  
  <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
  <text x="200" y="200" text-anchor="middle" fill="#9ca3af" font-family="Arial, sans-serif" font-size="12">
    Voucher Image
  </text>
  <text x="200" y="220" text-anchor="middle" fill="#6b7280" font-family="Arial, sans-serif" font-size="10">
    Generated from PDF
  </text>
  
  <!-- –†–∞–º–∫–∞ -->
  <rect x="10" y="10" width="380" height="280" fill="none" stroke="#10b981" stroke-width="3"/>
</svg>`;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG
    fs.writeFileSync(outputPath.replace('.png', '.svg'), svgContent);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PNG –∑–∞–≥–ª—É—à–∫—É (–±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
    const pngHeader = Buffer.from([
      0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, // PNG signature
      0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, // IHDR chunk
      0x00, 0x00, 0x01, 0x90, 0x00, 0x00, 0x01, 0x2C, // 400x300
      0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // RGB, no compression
      0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, // IEND chunk
      0xAE, 0x42, 0x60, 0x82
    ]);
    
    fs.writeFileSync(outputPath, pngHeader);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${outputPath}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
function processAllPdfVouchers() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF –≤–∞—É—á–µ—Ä–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n');

  let totalProcessed = 0;
  let totalSuccess = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏—Ä
  Object.entries(TIER_FOLDERS).forEach(([tierName, folderName]) => {
    const sourceFolder = path.join(process.cwd(), folderName);
    const outputFolder = OUTPUT_FOLDERS[tierName];
    
    console.log(`\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏—Ä: ${tierName}`);
    console.log(`üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${sourceFolder}`);
    console.log(`üìÇ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${outputFolder}`);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    ensureDirectoryExists(outputFolder);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if (!fs.existsSync(sourceFolder)) {
      console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ ${sourceFolder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    const pdfFiles = fs.readdirSync(sourceFolder).filter(file => file.endsWith('.pdf'));
    
    if (pdfFiles.length === 0) {
      console.log(`‚ö†Ô∏è  PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ${sourceFolder}`);
      return;
    }

    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: ${pdfFiles.length}`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π PDF
    pdfFiles.forEach((pdfFile, index) => {
      const pdfPath = path.join(sourceFolder, pdfFile);
      const imageName = pdfFile.replace('.pdf', '.png');
      const outputPath = path.join(outputFolder, imageName);
      
      console.log(`\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: ${pdfFile}`);
      console.log(`   ‚Üí ${imageName}`);
      
      totalProcessed++;
      
      if (createImagePlaceholder(pdfPath, outputPath, pdfFile.replace('.pdf', ''))) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ!`);
        totalSuccess++;
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`);
      }
    });
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:`);
  console.log(`   üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${totalSuccess}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${totalProcessed - totalSuccess}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤–∞—É—á–µ—Ä–æ–≤
function createVoucherConfig() {
  console.log('\nüîß –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∞—É—á–µ—Ä–æ–≤...');

  const voucherConfig = {
    tiers: {},
    version: 1,
    lastUpdated: new Date().toISOString()
  };

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏—Ä
  Object.entries(TIER_FOLDERS).forEach(([tierName, folderName]) => {
    const sourceFolder = path.join(process.cwd(), folderName);
    
    if (!fs.existsSync(sourceFolder)) {
      return;
    }

    const pdfFiles = fs.readdirSync(sourceFolder).filter(file => file.endsWith('.pdf'));
    
    voucherConfig.tiers[tierName] = {
      name: tierName,
      vouchers: pdfFiles.map((pdfFile, index) => {
        const voucherName = pdfFile.replace('.pdf', '');
        const imageName = pdfFile.replace('.pdf', '.png');
        
        return {
          id: `${tierName.toLowerCase()}_${index + 1}`,
          name: voucherName,
          description: `Voucher: ${voucherName}`,
          value: extractValueFromName(voucherName),
          type: determineVoucherType(voucherName),
          image: imageName,
          pdf: pdfFile
        };
      })
    };
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  const configPath = path.join(process.cwd(), 'data', 'voucher-config.json');
  ensureDirectoryExists(path.dirname(configPath));
  fs.writeFileSync(configPath, JSON.stringify(voucherConfig, null, 2));
  
  console.log(`‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${configPath}`);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞—É—á–µ—Ä–∞
function extractValueFromName(voucherName) {
  // –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  const valueMatch = voucherName.match(/(\d+)\s*(\$|%|hour|hours)/i);
  if (valueMatch) {
    return `${valueMatch[1]}${valueMatch[2]}`;
  }
  
  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
  if (voucherName.toLowerCase().includes('free')) {
    return 'Free';
  }
  if (voucherName.toLowerCase().includes('unlimited')) {
    return 'Unlimited';
  }
  if (voucherName.toLowerCase().includes('premium')) {
    return 'Premium';
  }
  
  return 'Special';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –≤–∞—É—á–µ—Ä–∞
function determineVoucherType(voucherName) {
  const name = voucherName.toLowerCase();
  
  if (name.includes('rental') && name.includes('hour')) {
    return 'SINGLE_USE';
  }
  if (name.includes('rental') && name.includes('$')) {
    return 'MULTI_USE';
  }
  if (name.includes('discount') || name.includes('unlimited') || name.includes('premium')) {
    return 'DURATION';
  }
  
  return 'SINGLE_USE';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –º–∞–ø–ø–∏–Ω–≥–∞
function updateVideoMapping() {
  console.log('\nüé¨ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ç–∏—Ä–∞–º–∏...');
  
  const VIDEO_TIER_MAPPING = {
    'video5307504616261323179.mp4': 'Silver',   // 79 = Silver
    'video5307504616261323180.mp4': 'Platinum', // 80 = Platinum  
    'video5307504616261323181.mp4': 'Gold',     // 81 = Gold
    'video5307504616261323182.mp4': 'Bronze'    // 82 = Bronze
  };
  
  const videoMapping = {
    mapping: VIDEO_TIER_MAPPING,
    description: '–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å —Ç–∏—Ä–∞–º–∏',
    note: '79=Silver, 80=Platinum, 81=Gold, 82=Bronze',
    lastUpdated: new Date().toISOString()
  };
  
  const mappingPath = path.join(process.cwd(), 'data', 'video-tier-mapping.json');
  ensureDirectoryExists(path.dirname(mappingPath));
  fs.writeFileSync(mappingPath, JSON.stringify(videoMapping, null, 2));
  
  console.log(`‚úÖ –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${mappingPath}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üé´ –ü—Ä–æ—Å—Ç–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤–∞—É—á–µ—Ä–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureDirectoryExists(path.join(process.cwd(), 'data'));
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    processAllPdfVouchers();
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∞—É—á–µ—Ä–æ–≤
    createVoucherConfig();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
    updateVideoMapping();
    
    console.log('\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:');
    console.log('- public/assets/tier1/ - Bronze –≤–∞—É—á–µ—Ä—ã');
    console.log('- public/assets/tier2/ - Silver –≤–∞—É—á–µ—Ä—ã');
    console.log('- public/assets/tier3/ - Gold –≤–∞—É—á–µ—Ä—ã');
    console.log('- public/assets/tier4/ - Platinum –≤–∞—É—á–µ—Ä—ã');
    console.log('- data/voucher-config.json - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞—É—á–µ—Ä–æ–≤');
    console.log('- data/video-tier-mapping.json - –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ');
    
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ public/assets/');
    console.log('2. –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ImageMagick –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node scripts/convert-pdf-vouchers.js');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:3000/admin');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ NFT –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ: http://localhost:3000/dashboard/rewards');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  createImagePlaceholder,
  processAllPdfVouchers,
  createVoucherConfig,
  updateVideoMapping
};




