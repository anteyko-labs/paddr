const fs = require('fs');
const path = require('path');

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ—á–Ω—ã—Ö –∫–æ–ø–∏–π
 */

console.log('üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ PDF —Ñ–∞–π–ª–æ–≤...\n');

// –ü–∞–ø–∫–∏ —Å PDF –≤–∞—É—á–µ—Ä–∞–º–∏
const TIER_FOLDERS = {
  'BRONZE': 'BRONZE',
  'SILVER': 'SILVER', 
  'GOLD': 'GOLD',
  'PLATINUM': 'PLATINUM'
};

// –ü–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const OUTPUT_FOLDERS = {
  'BRONZE': 'public/assets/tier1',
  'SILVER': 'public/assets/tier2',
  'GOLD': 'public/assets/tier3', 
  'PLATINUM': 'public/assets/tier4'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dirPath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
function createPDFConverterHTML(voucherName, tierName, pdfPath, outputPath) {
  const colors = {
    'BRONZE': { primary: '#CD7F32', secondary: '#FFD700', text: '#FFFFFF', bg: '#2D1810' },
    'SILVER': { primary: '#C0C0C0', secondary: '#E8E8E8', text: '#000000', bg: '#F5F5F5' },
    'GOLD': { primary: '#FFD700', secondary: '#FFF8DC', text: '#000000', bg: '#FFFACD' },
    'PLATINUM': { primary: '#E5E4E2', secondary: '#F8F8FF', text: '#000000', bg: '#F0F0F0' }
  };
  
  const color = colors[tierName];
  
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>PDF to Image Converter - ${voucherName}</title>
    <style>
        body { 
            margin: 0; 
            padding: 20px; 
            background: #1a1a1a; 
            color: white; 
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        .pdf-viewer {
            width: 100%;
            height: 600px;
            border: 1px solid #333;
            margin: 20px 0;
        }
        canvas { 
            border: 1px solid #333; 
            margin: 10px 0;
        }
        button { 
            background: #10b981; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 4px; 
            cursor: pointer; 
            margin: 10px;
            font-size: 16px;
        }
        button:hover { 
            background: #059669; 
        }
        .info {
            background: #111827;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .steps {
            background: #1f2937;
            padding: 20px;
            border-radius: 8px;
            margin: 20px 0;
        }
        .step {
            margin: 10px 0;
            padding: 10px;
            background: #374151;
            border-radius: 4px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üé® –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h1>
        <h2>${voucherName} - ${tierName}</h2>
        
        <div class="info">
            <h3>üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
            <ol>
                <li>–ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª –Ω–∏–∂–µ</li>
                <li>–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF</li>
                <li>–ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤ PDF"</li>
                <li>–°–∫–∞—á–∞–π—Ç–µ PNG —Ñ–∞–π–ª</li>
                <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –ø–∞–ø–∫—É: ${outputPath}</li>
            </ol>
        </div>
        
        <div class="steps">
            <h3>üìÅ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF</h3>
            <input type="file" id="pdfInput" accept=".pdf" />
            <div id="pdfViewer" class="pdf-viewer" style="display: none;"></div>
        </div>
        
        <div class="steps">
            <h3>üé® –®–∞–≥ 2: –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</h3>
            <button onclick="createImageFromPDF()">üì∏ –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ –≤ PDF</button>
            <button onclick="createCustomImage()">üé® –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
            <canvas id="canvas" width="400" height="300" style="display: none;"></canvas>
        </div>
        
        <div class="steps">
            <h3>üì• –®–∞–≥ 3: –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç</h3>
            <button id="downloadBtn" onclick="downloadImage()" style="display: none;">üì• –°–∫–∞—á–∞—Ç—å PNG</button>
        </div>
        
        <div class="info">
            <h3>üéØ –¶–≤–µ—Ç–∞ –¥–ª—è ${tierName}:</h3>
            <div style="display: flex; gap: 20px; margin: 10px 0;">
                <div style="width: 50px; height: 50px; background: ${color.primary}; border: 1px solid #333;"></div>
                <div style="width: 50px; height: 50px; background: ${color.secondary}; border: 1px solid #333;"></div>
                <div style="width: 50px; height: 50px; background: ${color.bg}; border: 1px solid #333;"></div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.min.js"></script>
    <script>
        let pdfDoc = null;
        let currentPage = 1;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ PDF.js
        pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';
        
        document.getElementById('pdfInput').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                loadPDF(file);
            }
        });
        
        function loadPDF(file) {
            const fileReader = new FileReader();
            fileReader.onload = function(e) {
                const typedarray = new Uint8Array(e.target.result);
                pdfjsLib.getDocument(typedarray).promise.then(function(pdf) {
                    pdfDoc = pdf;
                    renderPage(1);
                    document.getElementById('pdfViewer').style.display = 'block';
                });
            };
            fileReader.readAsArrayBuffer(file);
        }
        
        function renderPage(pageNum) {
            pdfDoc.getPage(pageNum).then(function(page) {
                const scale = 1.5;
                const viewport = page.getViewport({scale: scale});
                
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                canvas.height = viewport.height;
                canvas.width = viewport.width;
                
                const renderContext = {
                    canvasContext: ctx,
                    viewport: viewport
                };
                
                page.render(renderContext).promise.then(function() {
                    const pdfViewer = document.getElementById('pdfViewer');
                    pdfViewer.innerHTML = '';
                    pdfViewer.appendChild(canvas);
                });
            });
        }
        
        function createImageFromPDF() {
            const pdfCanvas = document.querySelector('#pdfViewer canvas');
            if (!pdfCanvas) {
                alert('–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª!');
                return;
            }
            
            const outputCanvas = document.getElementById('canvas');
            const ctx = outputCanvas.getContext('2d');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º canvas
            outputCanvas.style.display = 'block';
            
            // –û—á–∏—â–∞–µ–º canvas
            ctx.clearRect(0, 0, 400, 300);
            
            // –ö–æ–ø–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ PDF
            ctx.drawImage(pdfCanvas, 0, 0, 400, 300);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            document.getElementById('downloadBtn').style.display = 'block';
            
            alert('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å PNG.');
        }
        
        function createCustomImage() {
            const canvas = document.getElementById('canvas');
            const ctx = canvas.getContext('2d');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º canvas
            canvas.style.display = 'block';
            
            const colors = ${JSON.stringify(color)};
            
            // –û—á–∏—â–∞–µ–º canvas
            ctx.clearRect(0, 0, 400, 300);
            
            // –§–æ–Ω
            ctx.fillStyle = colors.bg;
            ctx.fillRect(0, 0, 400, 300);
            
            // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            const gradient = ctx.createLinearGradient(0, 0, 400, 300);
            gradient.addColorStop(0, colors.primary);
            gradient.addColorStop(1, colors.secondary);
            ctx.fillStyle = gradient;
            ctx.fillRect(10, 10, 380, 280);
            
            // –†–∞–º–∫–∞
            ctx.strokeStyle = colors.primary;
            ctx.lineWidth = 3;
            ctx.strokeRect(10, 10, 380, 280);
            
            // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–º–∫–∞
            ctx.strokeStyle = colors.text;
            ctx.lineWidth = 2;
            ctx.setLineDash([5, 5]);
            ctx.strokeRect(30, 30, 340, 240);
            ctx.setLineDash([]);
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏—Ä–∞
            ctx.fillStyle = colors.text;
            ctx.font = 'bold 24px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('${tierName} TIER', 200, 60);
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–∞
            ctx.font = 'bold 16px Arial';
            const words = '${voucherName}'.split(' ');
            let y = 100;
            for (let i = 0; i < words.length; i += 2) {
                const line = words.slice(i, i + 2).join(' ');
                ctx.fillText(line, 200, y);
                y += 25;
            }
            
            // –ò–∫–æ–Ω–∫–∞ –≤–∞—É—á–µ—Ä–∞
            ctx.fillStyle = '#DC2626';
            ctx.fillRect(150, 140, 100, 80);
            ctx.fillStyle = 'white';
            ctx.font = 'bold 18px Arial';
            ctx.fillText('VOUCHER', 200, 185);
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ctx.fillStyle = colors.text;
            ctx.font = '14px Arial';
            ctx.fillText('Digital Voucher', 200, 240);
            ctx.font = '12px Arial';
            ctx.fillText('Generated from PDF', 200, 260);
            
            // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            ctx.fillStyle = colors.primary;
            ctx.globalAlpha = 0.3;
            ctx.beginPath();
            ctx.arc(50, 50, 20, 0, 2 * Math.PI);
            ctx.fill();
            
            ctx.beginPath();
            ctx.arc(350, 250, 15, 0, 2 * Math.PI);
            ctx.fill();
            
            ctx.fillRect(30, 250, 40, 20);
            ctx.fillRect(330, 30, 40, 20);
            
            ctx.globalAlpha = 1;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            document.getElementById('downloadBtn').style.display = 'block';
        }
        
        function downloadImage() {
            const canvas = document.getElementById('canvas');
            const link = document.createElement('a');
            link.download = '${voucherName.replace(/[^a-zA-Z0-9]/g, '_')}.png';
            link.href = canvas.toDataURL();
            link.click();
        }
    </script>
</body>
</html>`;

  fs.writeFileSync(outputPath, htmlContent);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
function processAllPdfVouchers() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n');

  let totalProcessed = 0;
  let totalSuccess = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏—Ä
  Object.entries(TIER_FOLDERS).forEach(([tierName, folderName]) => {
    const sourceFolder = path.join(process.cwd(), folderName);
    const outputFolder = OUTPUT_FOLDERS[tierName];
    
    console.log(`\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏—Ä: ${tierName}`);
    console.log(`üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${sourceFolder}`);
    console.log(`üìÇ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${outputFolder}`);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    ensureDirectoryExists(outputFolder);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if (!fs.existsSync(sourceFolder)) {
      console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ ${sourceFolder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    const pdfFiles = fs.readdirSync(sourceFolder).filter(file => file.endsWith('.pdf'));
    
    if (pdfFiles.length === 0) {
      console.log(`‚ö†Ô∏è  PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ${sourceFolder}`);
      return;
    }

    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: ${pdfFiles.length}`);

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ PDF
    pdfFiles.forEach((pdfFile, index) => {
      const pdfPath = path.join(sourceFolder, pdfFile);
      const voucherName = pdfFile.replace('.pdf', '');
      const converterName = `${voucherName.replace(/[^a-zA-Z0-9]/g, '_')}_converter.html`;
      const outputPath = path.join(outputFolder, converterName);
      
      console.log(`\nüîÑ –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä: ${pdfFile}`);
      console.log(`   ‚Üí ${converterName}`);
      
      totalProcessed++;
      
      try {
        createPDFConverterHTML(voucherName, tierName, pdfPath, outputPath);
        console.log(`   ‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω!`);
        totalSuccess++;
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞: ${error.message}`);
      }
    });
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤:`);
  console.log(`   üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${totalSuccess}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${totalProcessed - totalSuccess}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üìÑ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–≤ PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureDirectoryExists(path.join(process.cwd(), 'data'));
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã
    processAllPdfVouchers();
    
    console.log('\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ HTML –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä—ã');
    console.log('3. –°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ PDF');
    console.log('4. –°–∫–∞—á–∞–π—Ç–µ PNG —Ñ–∞–π–ª—ã');
    console.log('5. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –ø–∞–ø–∫–∏ public/assets/');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  createPDFConverterHTML,
  processAllPdfVouchers
};




