const fs = require('fs');
const path = require('path');

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥
 * –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ PDF —Ñ–∞–π–ª–æ–≤
 */

console.log('üé´ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n');

// –ü–∞–ø–∫–∏ —Å PDF –≤–∞—É—á–µ—Ä–∞–º–∏
const TIER_FOLDERS = {
  'BRONZE': 'BRONZE',
  'SILVER': 'SILVER', 
  'GOLD': 'GOLD',
  'PLATINUM': 'PLATINUM'
};

// –ü–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const OUTPUT_FOLDERS = {
  'BRONZE': 'public/assets/tier1',
  'SILVER': 'public/assets/tier2',
  'GOLD': 'public/assets/tier3', 
  'PLATINUM': 'public/assets/tier4'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dirPath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function createPNGImage(voucherName, tierName, outputPath) {
  try {
    // –°–æ–∑–¥–∞–µ–º PNG —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    const width = 400;
    const height = 300;
    
    // PNG –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const pngSignature = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);
    
    // IHDR chunk
    const ihdrData = Buffer.alloc(13);
    ihdrData.writeUInt32BE(width, 0);   // width
    ihdrData.writeUInt32BE(height, 4); // height
    ihdrData.writeUInt8(8, 8);         // bit depth
    ihdrData.writeUInt8(2, 9);         // color type (RGB)
    ihdrData.writeUInt8(0, 10);        // compression
    ihdrData.writeUInt8(0, 11);        // filter
    ihdrData.writeUInt8(0, 12);        // interlace
    
    const ihdrCrc = crc32(Buffer.concat([Buffer.from('IHDR'), ihdrData]));
    const ihdrChunk = Buffer.concat([
      Buffer.from([0x00, 0x00, 0x00, 0x0D]), // length
      Buffer.from('IHDR'),
      ihdrData,
      Buffer.from([
        (ihdrCrc >> 24) & 0xFF,
        (ihdrCrc >> 16) & 0xFF,
        (ihdrCrc >> 8) & 0xFF,
        ihdrCrc & 0xFF
      ])
    ]);
    
    // IDAT chunk (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const idatData = Buffer.alloc(1); // –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    const idatCrc = crc32(Buffer.concat([Buffer.from('IDAT'), idatData]));
    const idatChunk = Buffer.concat([
      Buffer.from([0x00, 0x00, 0x00, 0x01]), // length
      Buffer.from('IDAT'),
      idatData,
      Buffer.from([
        (idatCrc >> 24) & 0xFF,
        (idatCrc >> 16) & 0xFF,
        (idatCrc >> 8) & 0xFF,
        idatCrc & 0xFF
      ])
    ]);
    
    // IEND chunk
    const iendCrc = crc32(Buffer.from('IEND'));
    const iendChunk = Buffer.concat([
      Buffer.from([0x00, 0x00, 0x00, 0x00]), // length
      Buffer.from('IEND'),
      Buffer.from([
        (iendCrc >> 24) & 0xFF,
        (iendCrc >> 16) & 0xFF,
        (iendCrc >> 8) & 0xFF,
        iendCrc & 0xFF
      ])
    ]);
    
    // –°–æ–±–∏—Ä–∞–µ–º PNG —Ñ–∞–π–ª
    const pngBuffer = Buffer.concat([pngSignature, ihdrChunk, idatChunk, iendChunk]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, pngBuffer);
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ SVG –≤–µ—Ä—Å–∏—é –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const svgPath = outputPath.replace('.png', '.svg');
    const svgContent = createSVGContent(voucherName, tierName);
    fs.writeFileSync(svgPath, svgContent);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PNG ${outputPath}:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è SVG –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function createSVGContent(voucherName, tierName) {
  const tierColors = {
    'BRONZE': { bg: '#cd7f32', text: '#ffffff', accent: '#ffd700' },
    'SILVER': { bg: '#c0c0c0', text: '#000000', accent: '#ffffff' },
    'GOLD': { bg: '#ffd700', text: '#000000', accent: '#ffffff' },
    'PLATINUM': { bg: '#e5e4e2', text: '#000000', accent: '#000000' }
  };
  
  const colors = tierColors[tierName] || tierColors['BRONZE'];
  
  return `<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <linearGradient id="bg" x1="0%" y1="0%" x2="100%" y2="100%">
      <stop offset="0%" style="stop-color:${colors.bg};stop-opacity:0.8" />
      <stop offset="100%" style="stop-color:${colors.accent};stop-opacity:0.6" />
    </linearGradient>
  </defs>
  
  <!-- –§–æ–Ω -->
  <rect width="400" height="300" fill="url(#bg)" stroke="${colors.accent}" stroke-width="3"/>
  
  <!-- –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–º–∫–∞ -->
  <rect x="20" y="20" width="360" height="260" fill="none" stroke="${colors.text}" stroke-width="2" stroke-dasharray="5,5"/>
  
  <!-- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏—Ä–∞ -->
  <text x="200" y="50" text-anchor="middle" fill="${colors.text}" font-family="Arial, sans-serif" font-size="20" font-weight="bold">
    ${tierName} TIER
  </text>
  
  <!-- –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–∞ -->
  <text x="200" y="100" text-anchor="middle" fill="${colors.text}" font-family="Arial, sans-serif" font-size="16" font-weight="bold">
    ${voucherName}
  </text>
  
  <!-- –ò–∫–æ–Ω–∫–∞ PDF -->
  <rect x="150" y="120" width="100" height="80" fill="#dc2626" stroke="#ef4444" stroke-width="2" rx="5"/>
  <text x="200" y="170" text-anchor="middle" fill="white" font-family="Arial, sans-serif" font-size="24" font-weight="bold">
    PDF
  </text>
  
  <!-- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è -->
  <text x="200" y="220" text-anchor="middle" fill="${colors.text}" font-family="Arial, sans-serif" font-size="12">
    Digital Voucher
  </text>
  <text x="200" y="240" text-anchor="middle" fill="${colors.text}" font-family="Arial, sans-serif" font-size="10">
    Generated from PDF
  </text>
  
  <!-- –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã -->
  <circle cx="50" cy="50" r="20" fill="${colors.accent}" opacity="0.3"/>
  <circle cx="350" cy="250" r="15" fill="${colors.accent}" opacity="0.3"/>
  <rect x="30" y="250" width="40" height="20" fill="${colors.accent}" opacity="0.2" rx="3"/>
  <rect x="330" y="30" width="40" height="20" fill="${colors.accent}" opacity="0.2" rx="3"/>
</svg>`;
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è CRC32
function crc32(data) {
  const table = [];
  for (let i = 0; i < 256; i++) {
    let c = i;
    for (let j = 0; j < 8; j++) {
      c = (c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1);
    }
    table[i] = c;
  }
  
  let crc = 0xFFFFFFFF;
  for (let i = 0; i < data.length; i++) {
    crc = table[(crc ^ data[i]) & 0xFF] ^ (crc >>> 8);
  }
  return (crc ^ 0xFFFFFFFF) >>> 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
function processAllPdfVouchers() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é PDF –≤–∞—É—á–µ—Ä–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...\n');

  let totalProcessed = 0;
  let totalSuccess = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏—Ä
  Object.entries(TIER_FOLDERS).forEach(([tierName, folderName]) => {
    const sourceFolder = path.join(process.cwd(), folderName);
    const outputFolder = OUTPUT_FOLDERS[tierName];
    
    console.log(`\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏—Ä: ${tierName}`);
    console.log(`üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${sourceFolder}`);
    console.log(`üìÇ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${outputFolder}`);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    ensureDirectoryExists(outputFolder);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if (!fs.existsSync(sourceFolder)) {
      console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ ${sourceFolder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      return;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    const pdfFiles = fs.readdirSync(sourceFolder).filter(file => file.endsWith('.pdf'));
    
    if (pdfFiles.length === 0) {
      console.log(`‚ö†Ô∏è  PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ${sourceFolder}`);
      return;
    }

    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: ${pdfFiles.length}`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π PDF
    pdfFiles.forEach((pdfFile, index) => {
      const pdfPath = path.join(sourceFolder, pdfFile);
      const imageName = pdfFile.replace('.pdf', '.png');
      const outputPath = path.join(outputFolder, imageName);
      
      console.log(`\nüîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º: ${pdfFile}`);
      console.log(`   ‚Üí ${imageName}`);
      
      totalProcessed++;
      
      if (createPNGImage(pdfFile.replace('.pdf', ''), tierName, outputPath)) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ!`);
        totalSuccess++;
      } else {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`);
      }
    });
  });

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:`);
  console.log(`   üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${totalSuccess}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${totalProcessed - totalSuccess}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  console.log('üé´ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureDirectoryExists(path.join(process.cwd(), 'data'));
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PDF –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    processAllPdfVouchers();
    
    console.log('\nüéâ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:');
    console.log('- public/assets/tier1/ - Bronze –≤–∞—É—á–µ—Ä—ã (PNG + SVG)');
    console.log('- public/assets/tier2/ - Silver –≤–∞—É—á–µ—Ä—ã (PNG + SVG)');
    console.log('- public/assets/tier3/ - Gold –≤–∞—É—á–µ—Ä—ã (PNG + SVG)');
    console.log('- public/assets/tier4/ - Platinum –≤–∞—É—á–µ—Ä—ã (PNG + SVG)');
    
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ public/assets/');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:3000/admin');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  createPNGImage,
  processAllPdfVouchers
};




