const fs = require('fs');
const path = require('path');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞—É—á–µ—Ä–æ–≤ —Å –Ω—É–ª—è
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç HTML Canvas –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞—É—á–µ—Ä–æ–≤ —Å –Ω—É–ª—è...\n');

// –ü–∞–ø–∫–∏ —Å PDF –≤–∞—É—á–µ—Ä–∞–º–∏
const TIER_FOLDERS = {
  'BRONZE': 'BRONZE',
  'SILVER': 'SILVER', 
  'GOLD': 'GOLD',
  'PLATINUM': 'PLATINUM'
};

// –ü–∞–ø–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const OUTPUT_FOLDERS = {
  'BRONZE': 'public/assets/tier1',
  'SILVER': 'public/assets/tier2',
  'GOLD': 'public/assets/tier3', 
  'PLATINUM': 'public/assets/tier4'
};

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏—Ä–∞
const TIER_COLORS = {
  'BRONZE': {
    primary: '#CD7F32',
    secondary: '#FFD700',
    accent: '#B8860B',
    text: '#FFFFFF',
    bg: '#2D1810'
  },
  'SILVER': {
    primary: '#C0C0C0',
    secondary: '#E8E8E8',
    accent: '#A8A8A8',
    text: '#000000',
    bg: '#F5F5F5'
  },
  'GOLD': {
    primary: '#FFD700',
    secondary: '#FFF8DC',
    accent: '#DAA520',
    text: '#000000',
    bg: '#FFFACD'
  },
  'PLATINUM': {
    primary: '#E5E4E2',
    secondary: '#F8F8FF',
    accent: '#C0C0C0',
    text: '#000000',
    bg: '#F0F0F0'
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–æ–∫
function ensureDirectoryExists(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${dirPath}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å Canvas
function createCanvasHTML(voucherName, tierName, outputPath) {
  const colors = TIER_COLORS[tierName];
  
  const htmlContent = `
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>Voucher Generator</title>
    <style>
        body { margin: 0; padding: 20px; background: #1a1a1a; }
        canvas { border: 1px solid #333; }
        .info { color: white; margin-top: 10px; }
    </style>
</head>
<body>
    <canvas id="canvas" width="400" height="300"></canvas>
    <div class="info">
        <p>–¢–∏—Ä: ${tierName}</p>
        <p>–í–∞—É—á–µ—Ä: ${voucherName}</p>
        <button onclick="downloadImage()">–°–∫–∞—á–∞—Ç—å PNG</button>
    </div>

    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        
        // –¶–≤–µ—Ç–∞
        const colors = ${JSON.stringify(colors)};
        
        // –û—á–∏—â–∞–µ–º canvas
        ctx.clearRect(0, 0, 400, 300);
        
        // –§–æ–Ω
        ctx.fillStyle = colors.bg;
        ctx.fillRect(0, 0, 400, 300);
        
        // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        const gradient = ctx.createLinearGradient(0, 0, 400, 300);
        gradient.addColorStop(0, colors.primary);
        gradient.addColorStop(1, colors.secondary);
        ctx.fillStyle = gradient;
        ctx.fillRect(10, 10, 380, 280);
        
        // –†–∞–º–∫–∞
        ctx.strokeStyle = colors.accent;
        ctx.lineWidth = 3;
        ctx.strokeRect(10, 10, 380, 280);
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–º–∫–∞
        ctx.strokeStyle = colors.text;
        ctx.lineWidth = 2;
        ctx.setLineDash([5, 5]);
        ctx.strokeRect(30, 30, 340, 240);
        ctx.setLineDash([]);
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏—Ä–∞
        ctx.fillStyle = colors.text;
        ctx.font = 'bold 24px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('${tierName} TIER', 200, 60);
        
        // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–∞
        ctx.font = 'bold 18px Arial';
        ctx.fillText('${voucherName}', 200, 100);
        
        // –ò–∫–æ–Ω–∫–∞ –≤–∞—É—á–µ—Ä–∞
        ctx.fillStyle = '#DC2626';
        ctx.fillRect(150, 120, 100, 80);
        ctx.fillStyle = 'white';
        ctx.font = 'bold 20px Arial';
        ctx.fillText('VOUCHER', 200, 170);
        
        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        ctx.fillStyle = colors.text;
        ctx.font = '14px Arial';
        ctx.fillText('Digital Voucher', 200, 220);
        ctx.font = '12px Arial';
        ctx.fillText('Generated from PDF', 200, 240);
        
        // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        ctx.fillStyle = colors.accent;
        ctx.globalAlpha = 0.3;
        ctx.beginPath();
        ctx.arc(50, 50, 20, 0, 2 * Math.PI);
        ctx.fill();
        
        ctx.beginPath();
        ctx.arc(350, 250, 15, 0, 2 * Math.PI);
        ctx.fill();
        
        ctx.fillRect(30, 250, 40, 20);
        ctx.fillRect(330, 30, 40, 20);
        
        ctx.globalAlpha = 1;
        
        // –§—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        function downloadImage() {
            const link = document.createElement('a');
            link.download = '${voucherName.replace(/[^a-zA-Z0-9]/g, '_')}.png';
            link.href = canvas.toDataURL();
            link.click();
        }
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
        setTimeout(downloadImage, 1000);
    </script>
</body>
</html>`;

  return htmlContent;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Puppeteer
async function createPNGWithPuppeteer(voucherName, tierName, outputPath) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Puppeteer
    let puppeteer;
    try {
      puppeteer = require('puppeteer');
    } catch (error) {
      console.log('üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Puppeteer...');
      const { execSync } = require('child_process');
      execSync('npm install puppeteer', { stdio: 'inherit' });
      puppeteer = require('puppeteer');
    }

    const colors = TIER_COLORS[tierName];
    
    const browser = await puppeteer.launch({ headless: true });
    const page = await browser.newPage();
    
    await page.setViewport({ width: 400, height: 300 });
    
    // –°–æ–∑–¥–∞–µ–º HTML –∫–æ–Ω—Ç–µ–Ω—Ç
    const htmlContent = `
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            body { margin: 0; padding: 0; }
            canvas { width: 400px; height: 300px; }
        </style>
    </head>
    <body>
        <canvas id="canvas" width="400" height="300"></canvas>
        <script>
            const canvas = document.getElementById('canvas');
            const ctx = canvas.getContext('2d');
            
            const colors = ${JSON.stringify(colors)};
            
            // –û—á–∏—â–∞–µ–º canvas
            ctx.clearRect(0, 0, 400, 300);
            
            // –§–æ–Ω
            ctx.fillStyle = colors.bg;
            ctx.fillRect(0, 0, 400, 300);
            
            // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
            const gradient = ctx.createLinearGradient(0, 0, 400, 300);
            gradient.addColorStop(0, colors.primary);
            gradient.addColorStop(1, colors.secondary);
            ctx.fillStyle = gradient;
            ctx.fillRect(10, 10, 380, 280);
            
            // –†–∞–º–∫–∞
            ctx.strokeStyle = colors.accent;
            ctx.lineWidth = 3;
            ctx.strokeRect(10, 10, 380, 280);
            
            // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–º–∫–∞
            ctx.strokeStyle = colors.text;
            ctx.lineWidth = 2;
            ctx.setLineDash([5, 5]);
            ctx.strokeRect(30, 30, 340, 240);
            ctx.setLineDash([]);
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏—Ä–∞
            ctx.fillStyle = colors.text;
            ctx.font = 'bold 24px Arial';
            ctx.textAlign = 'center';
            ctx.fillText('${tierName} TIER', 200, 60);
            
            // –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—É—á–µ—Ä–∞
            ctx.font = 'bold 18px Arial';
            ctx.fillText('${voucherName}', 200, 100);
            
            // –ò–∫–æ–Ω–∫–∞ –≤–∞—É—á–µ—Ä–∞
            ctx.fillStyle = '#DC2626';
            ctx.fillRect(150, 120, 100, 80);
            ctx.fillStyle = 'white';
            ctx.font = 'bold 20px Arial';
            ctx.fillText('VOUCHER', 200, 170);
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ctx.fillStyle = colors.text;
            ctx.font = '14px Arial';
            ctx.fillText('Digital Voucher', 200, 220);
            ctx.font = '12px Arial';
            ctx.fillText('Generated from PDF', 200, 240);
            
            // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
            ctx.fillStyle = colors.accent;
            ctx.globalAlpha = 0.3;
            ctx.beginPath();
            ctx.arc(50, 50, 20, 0, 2 * Math.PI);
            ctx.fill();
            
            ctx.beginPath();
            ctx.arc(350, 250, 15, 0, 2 * Math.PI);
            ctx.fill();
            
            ctx.fillRect(30, 250, 40, 20);
            ctx.fillRect(330, 30, 40, 20);
            
            ctx.globalAlpha = 1;
        </script>
    </body>
    </html>`;
    
    await page.setContent(htmlContent);
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    await page.waitForTimeout(1000);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    const screenshot = await page.screenshot({ 
      type: 'png',
      clip: { x: 0, y: 0, width: 400, height: 300 }
    });
    
    await browser.close();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG
    fs.writeFileSync(outputPath, screenshot);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PNG —Å Puppeteer:`, error.message);
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ PNG –±–µ–∑ Puppeteer
function createSimplePNG(voucherName, tierName, outputPath) {
  try {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PNG —Ñ–∞–π–ª —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
    const width = 400;
    const height = 300;
    
    // PNG –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const pngSignature = Buffer.from([0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A]);
    
    // IHDR chunk
    const ihdrData = Buffer.alloc(13);
    ihdrData.writeUInt32BE(width, 0);   // width
    ihdrData.writeUInt32BE(height, 4); // height
    ihdrData.writeUInt8(8, 8);         // bit depth
    ihdrData.writeUInt8(2, 9);         // color type (RGB)
    ihdrData.writeUInt8(0, 10);        // compression
    ihdrData.writeUInt8(0, 11);        // filter
    ihdrData.writeUInt8(0, 12);        // interlace
    
    const ihdrCrc = crc32(Buffer.concat([Buffer.from('IHDR'), ihdrData]));
    const ihdrChunk = Buffer.concat([
      Buffer.from([0x00, 0x00, 0x00, 0x0D]), // length
      Buffer.from('IHDR'),
      ihdrData,
      Buffer.from([
        (ihdrCrc >> 24) & 0xFF,
        (ihdrCrc >> 16) & 0xFF,
        (ihdrCrc >> 8) & 0xFF,
        ihdrCrc & 0xFF
      ])
    ]);
    
    // IDAT chunk (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
    const idatData = Buffer.alloc(1); // –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
    const idatCrc = crc32(Buffer.concat([Buffer.from('IDAT'), idatData]));
    const idatChunk = Buffer.concat([
      Buffer.from([0x00, 0x00, 0x00, 0x01]), // length
      Buffer.from('IDAT'),
      idatData,
      Buffer.from([
        (idatCrc >> 24) & 0xFF,
        (idatCrc >> 16) & 0xFF,
        (idatCrc >> 8) & 0xFF,
        idatCrc & 0xFF
      ])
    ]);
    
    // IEND chunk
    const iendCrc = crc32(Buffer.from('IEND'));
    const iendChunk = Buffer.concat([
      Buffer.from([0x00, 0x00, 0x00, 0x00]), // length
      Buffer.from('IEND'),
      Buffer.from([
        (iendCrc >> 24) & 0xFF,
        (iendCrc >> 16) & 0xFF,
        (iendCrc >> 8) & 0xFF,
        iendCrc & 0xFF
      ])
    ]);
    
    // –°–æ–±–∏—Ä–∞–µ–º PNG —Ñ–∞–π–ª
    const pngBuffer = Buffer.concat([pngSignature, ihdrChunk, idatChunk, iendChunk]);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PNG —Ñ–∞–π–ª
    fs.writeFileSync(outputPath, pngBuffer);
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PNG:`, error.message);
    return false;
  }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è CRC32
function crc32(data) {
  const table = [];
  for (let i = 0; i < 256; i++) {
    let c = i;
    for (let j = 0; j < 8; j++) {
      c = (c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1);
    }
    table[i] = c;
  }
  
  let crc = 0xFFFFFFFF;
  for (let i = 0; i < data.length; i++) {
    crc = table[(crc ^ data[i]) & 0xFF] ^ (crc >>> 8);
  }
  return (crc ^ 0xFFFFFFFF) >>> 0;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö PDF —Ñ–∞–π–ª–æ–≤
async function processAllPdfVouchers() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞—É—á–µ—Ä–æ–≤...\n');

  let totalProcessed = 0;
  let totalSuccess = 0;

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ç–∏—Ä
  for (const [tierName, folderName] of Object.entries(TIER_FOLDERS)) {
    const sourceFolder = path.join(process.cwd(), folderName);
    const outputFolder = OUTPUT_FOLDERS[tierName];
    
    console.log(`\nüìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∏—Ä: ${tierName}`);
    console.log(`üìÇ –ò—Å—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${sourceFolder}`);
    console.log(`üìÇ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${outputFolder}`);

    // –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–∞–ø–∫—É
    ensureDirectoryExists(outputFolder);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
    if (!fs.existsSync(sourceFolder)) {
      console.log(`‚ö†Ô∏è  –ü–∞–ø–∫–∞ ${sourceFolder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
      continue;
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ PDF —Ñ–∞–π–ª—ã
    const pdfFiles = fs.readdirSync(sourceFolder).filter(file => file.endsWith('.pdf'));
    
    if (pdfFiles.length === 0) {
      console.log(`‚ö†Ô∏è  PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ ${sourceFolder}`);
      continue;
    }

    console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ PDF —Ñ–∞–π–ª–æ–≤: ${pdfFiles.length}`);

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π PDF
    for (const pdfFile of pdfFiles) {
      const pdfPath = path.join(sourceFolder, pdfFile);
      const imageName = pdfFile.replace('.pdf', '.png');
      const outputPath = path.join(outputFolder, imageName);
      
      console.log(`\nüîÑ –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${pdfFile}`);
      console.log(`   ‚Üí ${imageName}`);
      
      totalProcessed++;
      
      // –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å PNG —Å Puppeteer
      if (await createPNGWithPuppeteer(pdfFile.replace('.pdf', ''), tierName, outputPath)) {
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω PNG!`);
        totalSuccess++;
      } else {
        // Fallback - —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π PNG
        if (createSimplePNG(pdfFile.replace('.pdf', ''), tierName, outputPath)) {
          console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ–π PNG`);
          totalSuccess++;
        } else {
          console.log(`   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
        }
      }
    }
  }

  console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:`);
  console.log(`   üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${totalProcessed}`);
  console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${totalSuccess}`);
  console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${totalProcessed - totalSuccess}`);
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∞—É—á–µ—Ä–æ–≤ —Å –Ω—É–ª—è\n');
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    ensureDirectoryExists(path.join(process.cwd(), 'data'));
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    await processAllPdfVouchers();
    
    console.log('\nüéâ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìã –°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã:');
    console.log('- public/assets/tier1/ - Bronze –≤–∞—É—á–µ—Ä—ã (PNG)');
    console.log('- public/assets/tier2/ - Silver –≤–∞—É—á–µ—Ä—ã (PNG)');
    console.log('- public/assets/tier3/ - Gold –≤–∞—É—á–µ—Ä—ã (PNG)');
    console.log('- public/assets/tier4/ - Platinum –≤–∞—É—á–µ—Ä—ã (PNG)');
    
    console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ public/assets/');
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:3000/admin');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = {
  createPNGWithPuppeteer,
  createSimplePNG,
  processAllPdfVouchers
};




