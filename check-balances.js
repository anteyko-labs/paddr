const { ethers } = require('ethers');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–π
const networks = {
  sepolia: {
    name: 'Sepolia Testnet',
    rpc: 'https://sepolia.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161',
    chainId: 11155111,
    tokenAddress: '0xa5d3fF94a7aeDA396666c8978Eec67C209202da0'
  },
  bscTestnet: {
    name: 'BSC Testnet', 
    rpc: 'https://data-seed-prebsc-1-s1.binance.org:8545/',
    chainId: 97,
    tokenAddress: '0xa5d3fF94a7aeDA396666c8978Eec67C209202da0' // –¢–æ—Ç –∂–µ –∞–¥—Ä–µ—Å –¥–ª—è BSC
  },
  mainnet: {
    name: 'Ethereum Mainnet',
    rpc: 'https://mainnet.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161', 
    chainId: 1,
    tokenAddress: '0xa5d3fF94a7aeDA396666c8978Eec67C209202da0'
  }
};

// ABI –¥–ª—è ERC20 —Ç–æ–∫–µ–Ω–∞
const ERC20_ABI = [
  "function balanceOf(address owner) view returns (uint256)",
  "function decimals() view returns (uint8)",
  "function symbol() view returns (string)",
  "function name() view returns (string)"
];

async function checkBalances(walletAddress) {
  console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –∞–¥—Ä–µ—Å–∞: ${walletAddress}\n`);
  
  for (const [networkKey, network] of Object.entries(networks)) {
    try {
      console.log(`üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ ${network.name}...`);
      const provider = new ethers.JsonRpcProvider(network.rpc);
      const contract = new ethers.Contract(network.tokenAddress, ERC20_ABI, provider);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–∞
      const balance = await contract.balanceOf(walletAddress);
      const decimals = await contract.decimals();
      const symbol = await contract.symbol();
      const name = await contract.name();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å ETH/BNB
      const nativeBalance = await provider.getBalance(walletAddress);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã
      const tokenBalance = ethers.formatUnits(balance, decimals);
      const nativeBalanceFormatted = ethers.formatEther(nativeBalance);
      
      console.log(`‚úÖ ${network.name}:`);
      console.log(`   üí∞ ${symbol} (${name}): ${tokenBalance}`);
      console.log(`   ‚õΩ ${networkKey === 'bscTestnet' ? 'BNB' : 'ETH'}: ${nativeBalanceFormatted}`);
      console.log(`   üîó Chain ID: ${network.chainId}`);
      console.log(`   üìç Token Contract: ${network.tokenAddress}\n`);
      
    } catch (error) {
      console.log(`‚ùå ${network.name}: –û—à–∏–±–∫–∞ - ${error.message}\n`);
    }
  }
}

// –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const walletAddress = process.argv[2];

if (!walletAddress) {
  console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞:');
  console.log('node check-balances.js 0x...');
  process.exit(1);
}

checkBalances(walletAddress).catch(console.error);
