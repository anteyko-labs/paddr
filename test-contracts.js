const { ethers } = require('ethers');

// BSC Testnet –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BSC_RPC = 'https://data-seed-prebsc-1-s1.binance.org:8545/';
const PAD_TOKEN_ADDRESS = '0x6e54ef83eD01B718c92DDEb2629E9849eDe5b94F';
const STAKE_MANAGER_ADDRESS = '0xdFb58CEe97B91178555CfAC3bE976e925F9De2e3';

// –ü—Ä–æ—Å—Ç–æ–π ABI –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
const ERC20_ABI = [
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)"
];

const STAKE_MANAGER_ABI = [
  "function tierCalculator() view returns (address)",
  "function nftFactory() view returns (address)",
  "function stakingToken() view returns (address)"
];

async function testContracts() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞–º –Ω–∞ BSC Testnet...\n');
  
  try {
    const provider = new ethers.JsonRpcProvider(BSC_RPC);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ BSC Testnet');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º PADToken
    console.log('\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º PADToken...');
    const padToken = new ethers.Contract(PAD_TOKEN_ADDRESS, ERC20_ABI, provider);
    
    const name = await padToken.name();
    const symbol = await padToken.symbol();
    const decimals = await padToken.decimals();
    const totalSupply = await padToken.totalSupply();
    
    console.log(`‚úÖ PADToken: ${name} (${symbol})`);
    console.log(`‚úÖ Decimals: ${decimals}`);
    console.log(`‚úÖ Total Supply: ${ethers.formatEther(totalSupply)} PAD`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º StakeManager
    console.log('\nüì¶ –¢–µ—Å—Ç–∏—Ä—É–µ–º StakeManager...');
    const stakeManager = new ethers.Contract(STAKE_MANAGER_ADDRESS, STAKE_MANAGER_ABI, provider);
    
    const tierCalc = await stakeManager.tierCalculator();
    const nftFactory = await stakeManager.nftFactory();
    const stakingToken = await stakeManager.stakingToken();
    
    console.log(`‚úÖ TierCalculator: ${tierCalc}`);
    console.log(`‚úÖ NFT Factory: ${nftFactory}`);
    console.log(`‚úÖ Staking Token: ${stakingToken}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∞–¥—Ä–µ—Å–∞ —Å–æ–≤–ø–∞–¥–∞—é—Ç
    if (stakingToken.toLowerCase() === PAD_TOKEN_ADDRESS.toLowerCase()) {
      console.log('‚úÖ Staking Token –∞–¥—Ä–µ—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å PADToken');
    } else {
      console.log('‚ùå Staking Token –∞–¥—Ä–µ—Å –ù–ï —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å PADToken');
      console.log(`Expected: ${PAD_TOKEN_ADDRESS}`);
      console.log(`Actual: ${stakingToken}`);
    }
    
    console.log('\nüéâ –í—Å–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testContracts().catch(console.error);
